package GUI;

import BackendCode.Customer;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

public class Customer_Update {

    JButton OK_Button, Cancel_Button;
    JLabel ID_Label, IDValidity_Label;
    JTextField ID_TextField;
    JFrame frame = new JFrame();
    static Customer customer; // this customer object is used in UpdateCustomer_Inner class to obtain the record for entered ID

    public Customer_Update() {
        frame.setTitle("Update Customer");
        frame.setLayout(new AbsoluteLayout());
        frame.setSize(new Dimension(450, 290));
        frame.setResizable(false);
        frame.setLocationRelativeTo(Parent_JFrame.getMainFrame());
        frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                Parent_JFrame.getMainFrame().setEnabled(true);
                frame.dispose();
            }
        });

        OK_Button = new JButton("OK");
        Cancel_Button = new JButton("Cancel");

        ID_Label = new JLabel("Enter ID to be Updated");
        IDValidity_Label = new JLabel();
        ID_TextField = new JTextField();

        ID_TextField.setPreferredSize(new Dimension(240, 22));

        ID_Label.setPreferredSize(new Dimension(175, 22));
        IDValidity_Label.setPreferredSize(new Dimension(240, 9));
        IDValidity_Label.setForeground(Color.red);
        frame.add(ID_Label, new AbsoluteConstraints(10, 5));
        frame.add(ID_TextField, new AbsoluteConstraints(195, 5));
        frame.add(IDValidity_Label, new AbsoluteConstraints(195, 30));
        frame.add(OK_Button, new AbsoluteConstraints(100, 225, 100, 22));
        frame.add(Cancel_Button, new AbsoluteConstraints(250, 225, 100, 22));

        OK_Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Customer CO = new Customer();
                String ID = ID_TextField.getText().trim();
                if (!ID_TextField.getText().isEmpty()) {
                    if (Customer.isIDvalid(ID)) {
                        CO.setID(Integer.parseInt(ID));
                        customer = Customer.SearchByID(Integer.parseInt(ID)); // the ID of this object is used in UpdateManage_GUI_B class. that is why it is kept static
                        if (customer != null) {
                            Parent_JFrame.getMainFrame().setEnabled(false);
                            frame.dispose();
                            new UpdateCustomer_Inner().setVisible(true);
                        } else {
                            JOptionPane.showMessageDialog(null, "Required ID is not found !");
                        }
                    } else {
                        IDValidity_Label.setText("Invalid ID !");
                    }
                } else {
                    IDValidity_Label.setText("Enter ID !");
                }
            }
        });

        Cancel_Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Parent_JFrame.getMainFrame().setEnabled(true);
                frame.dispose();
            }
        });
    }

    public class UpdateCustomer_Inner extends JFrame {

        JButton Update_Button, Cancel_Button;
        JLabel CNIC_Label, Name_Label, Contact_Label, Email_Label, UserName_Label, Password_Label, CNICValidity_Label, contactValidity_Label, NameValidity_Label, EmailValidity_Label, UserNameValidity_Label, PasswordValidity_Label;
        JTextField CNIC_TextField, Name_TextField, Contact_TextField, Email_TextField, UserName_TextField, Password_TextField;

        public UpdateCustomer_Inner() {
            super("Update Customer");
            setLayout(new AbsoluteLayout());
            setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

            setSize(new Dimension(450, 290));
            setResizable(false);
            setLocationRelativeTo(this);
            Update_Button = new JButton("Update");
            Cancel_Button = new JButton("Cancel");

            CNIC_Label = new JLabel("Enter CNIC (without dashes)");
            Name_Label = new JLabel("Enter Name");
            Contact_Label = new JLabel("Enter Contact");
            CNICValidity_Label = new JLabel();
            NameValidity_Label = new JLabel();
            contactValidity_Label = new JLabel();
            CNIC_TextField = new JTextField(customer.getCNIC());
            Name_TextField = new JTextField(customer.getName());
            Contact_TextField = new JTextField(customer.getContact_No());

            CNIC_TextField.setPreferredSize(new Dimension(240, 22));
            Name_TextField.setPreferredSize(new Dimension(240, 22));
            Contact_TextField.setPreferredSize(new Dimension(240, 22));

            CNIC_Label.setPreferredSize(new Dimension(175, 22));
            Name_Label.setPreferredSize(new Dimension(175, 22));
            Contact_Label.setPreferredSize(new Dimension(175, 22));
            CNICValidity_Label.setPreferredSize(new Dimension(240, 9));
            contactValidity_Label.setPreferredSize(new Dimension(240, 9));
            NameValidity_Label.setPreferredSize(new Dimension(240, 9));

            CNICValidity_Label.setForeground(Color.red);
            contactValidity_Label.setForeground(Color.red);
            NameValidity_Label.setForeground(Color.red);

            add(CNIC_Label, new AbsoluteConstraints(10, 5));
            add(CNIC_TextField, new AbsoluteConstraints(195, 5));
            add(CNICValidity_Label, new AbsoluteConstraints(195, 30));
            add(Name_Label, new AbsoluteConstraints(10, 42));
            add(Name_TextField, new AbsoluteConstraints(195, 42));
            add(NameValidity_Label, new AbsoluteConstraints(195, 66));
            add(Contact_Label, new AbsoluteConstraints(10, 77));
            add(Contact_TextField, new AbsoluteConstraints(195, 77));
            add(contactValidity_Label, new AbsoluteConstraints(195, 102));
            add(Update_Button, new AbsoluteConstraints(100, 225, 100, 22));
            add(Cancel_Button, new AbsoluteConstraints(250, 225, 100, 22));

            Update_Button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    String cnic = CNIC_TextField.getText().trim();
                    String name = Name_TextField.getText().trim();
                    String contact = Contact_TextField.getText().trim();
                    if (!cnic.isEmpty()) {
                        System.out.println("cnic is not empty");
                        if (Customer.isCNICValid(cnic)) {
                            System.out.println("CNIC is valid");
                            Customer CO = Customer.SearchByCNIC(cnic);
                            if (CO != null) {
                                if (cnic.equals(customer.getCNIC())) {
                                    System.out.println("no change in cnic");
                                } else {
                                    cnic = null;
                                    JOptionPane.showMessageDialog(null, "This CNIC is already registered !");
                                }
                            } else { // when Customer.SearchCNIC(M) returned null
                                System.out.println("new CNIC is entered");
                            }
                        } else {
                            cnic = null;
                            CNICValidity_Label.setText("Invalid CNIC !");
                        }
                    } else {
                        cnic = null;
                        CNICValidity_Label.setText("Enter CNIC !");
                    }
                    if (!name.isEmpty()) {
                        if (Customer.isNameValid(name)) {
                            System.out.println("valid Customer name !");
                        } else {
                            name = null;
                            NameValidity_Label.setText("Invalid Name !");
                        }
                    } else {
                        name = null;
                        NameValidity_Label.setText("Enter Name !");
                    }
                    if (!contact.isEmpty()) {
                        if (Customer.isContactNoValid(contact)) {
                            System.out.println("Valid Customer contact !");
                        } else {
                            contact = null;
                            contactValidity_Label.setText("Invalid Contact Number!");
                        }
                    } else {
                        contact = null;
                        contactValidity_Label.setText("Enter Contact Number !");
                    }
                    System.out.println("the value of cnic before null condition is " + cnic);
                    if (cnic != null && name != null && contact != null) {
                        customer = new Customer(customer.getBill(), customer.getID(), cnic, name, contact);
                        System.out.println(customer.toString());
                        customer.Update();
                        Parent_JFrame.getMainFrame().getContentPane().removeAll();
                        Customer_Details cd = new Customer_Details();
                        Parent_JFrame.getMainFrame().add(cd.getMainPanel());
                        Parent_JFrame.getMainFrame().getContentPane().revalidate();
                        JOptionPane.showMessageDialog(null, "Record Successfully Updated !");
                        Parent_JFrame.getMainFrame().setEnabled(true);
                        dispose();
                    }
                }
            });

            Cancel_Button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    Parent_JFrame.getMainFrame().setEnabled(true);
                    dispose();
                }
            });
        }

    }

}

package GUI;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

/**
 *
 * @author @AbdullahShahid01
 */
public class MainMenu implements ActionListener {

    private static JLabel Image_Label;
    private static JButton CarsButton, CustomerButton, OwnerButton, BookingButton, LogoutButton;
    private JPanel MainPanel;

    public JPanel getMainPanel() {
        return MainPanel;
    }

    public MainMenu() {
        MainPanel = new JPanel();

        MainPanel.setLayout(new AbsoluteLayout());
        MainPanel.setMinimumSize(new Dimension(1366, 730));

        CustomerButton = new JButton("Customer");
        CarsButton = new JButton("Cars");
        OwnerButton = new JButton("Owner");
        BookingButton = new JButton("Booking Details");
        LogoutButton = new JButton("Logout");

        Image_Label = new JLabel();

        LogoutButton.setFont(new Font("Tahoma", 1, 14));
        CustomerButton.setFont(new Font("Tahoma", 1, 14));
        CarsButton.setFont(new Font("Tahoma", 1, 14));
        OwnerButton.setFont(new Font("Tahoma", 1, 14));
        BookingButton.setFont(new Font("Tahoma", 1, 14));

        Image_Label.setIcon((new ImageIcon("MainMenuImage.jpeg")));

        CustomerButton.setBackground(new Color(240,240,240));
        CarsButton.setBackground(new Color(240,240,240));
        OwnerButton.setBackground(new Color(240,240,240));
        LogoutButton.setBackground(new Color(240,240,240));
        BookingButton.setBackground(new Color(240,240,240));

        MainPanel.add(LogoutButton, new AbsoluteConstraints(1166, 80, 100, 25));
        MainPanel.add(CustomerButton, new AbsoluteConstraints(70, 220, 200, 99));
        MainPanel.add(CarsButton, new AbsoluteConstraints(70, 500, 200, 99));
        MainPanel.add(OwnerButton, new AbsoluteConstraints(70, 360, 200, 99));
        MainPanel.add(BookingButton, new AbsoluteConstraints(70, 80, 200, 99));
        MainPanel.add(Image_Label, new AbsoluteConstraints(0, 0, 1370, 710));

        BookingButton.addActionListener(this);
        CustomerButton.addActionListener(this);
        OwnerButton.addActionListener(this);
        LogoutButton.addActionListener(this);
        CarsButton.addActionListener(this);
//        Parent_JFrame.getMainFrame().add(MainPanel);
    }

    @Override
    public void actionPerformed(ActionEvent e) {

        switch (e.getActionCommand()) {
            case "Cars": {
                Parent_JFrame.getMainFrame().getContentPane().removeAll();
                Car_Details cd = new Car_Details();
                Parent_JFrame.getMainFrame().add(cd.getMainPanel());
                Parent_JFrame.getMainFrame().getContentPane().revalidate();
            }
            break;
            case "Customer": {
                Parent_JFrame.getMainFrame().getContentPane().removeAll();
                Customer_Details cd = new Customer_Details();
                Parent_JFrame.getMainFrame().add(cd.getMainPanel());
                Parent_JFrame.getMainFrame().getContentPane().revalidate();
            }
            break;
            case "Owner": {
                Parent_JFrame.getMainFrame().getContentPane().removeAll();
                CarOwner_Details cd = new CarOwner_Details();
                Parent_JFrame.getMainFrame().add(cd.getMainPanel());
                Parent_JFrame.getMainFrame().getContentPane().revalidate();
            }
            break;
            case "Logout": {
                Parent_JFrame.getMainFrame().dispose();
                Runner r = new Runner();
                JFrame frame = r.getFrame();
                Login login = new Login();
                JPanel panel = login.getMainPanel();
                frame.add(panel);
                frame.setVisible(true);
            }
            break;
            case "Booking Details": {
            Parent_JFrame.getMainFrame().getContentPane().removeAll();
                Booking_Details cd = new Booking_Details();
                Parent_JFrame.getMainFrame().add(cd.getMainPanel());
                Parent_JFrame.getMainFrame().getContentPane().revalidate();
            }
            break;
        }
    }
}

package GUI;

import BackendCode.Car;
import BackendCode.CarOwner;
import java.awt.*;
import java.awt.event.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.*;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

/**
 *
 * @author @AbdullahShahid01
 */
public class Car_Update extends JFrame {

    JButton Update_Button, Cancel_Button;
    JLabel CarID_Label, CarIDValidity_Label;
    JTextField CarID_TextField;

    private Car car;

    public Car_Update() {
        super("Update Car");
        setLayout(new FlowLayout());
        setSize(new Dimension(300, 140));
        setResizable(false);
        setLocationRelativeTo(this);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                Parent_JFrame.getMainFrame().setEnabled(true);
                dispose();
            }
        });

        Update_Button = new JButton("Update");
        Cancel_Button = new JButton("Cancel");

        CarID_Label = new JLabel("Enter Car ID to be updated");
        CarIDValidity_Label = new JLabel();
        CarID_TextField = new JTextField();

        CarID_TextField.setPreferredSize(new Dimension(240, 22));
//        CarID_Label.setPreferredSize(new Dimension(175, 22));
        CarIDValidity_Label.setPreferredSize(new Dimension(415, 9));
        Update_Button.setPreferredSize(new Dimension(100, 22));
        Cancel_Button.setPreferredSize(new Dimension(100, 22));

        CarIDValidity_Label.setForeground(Color.red);

        add(CarID_Label);
        add(CarID_TextField);
        add(CarIDValidity_Label);

        add(Update_Button);
        add(Cancel_Button);

        Update_Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                String carID = CarID_TextField.getText().trim();

                if (!carID.isEmpty()) {
                    try {
                        if (Integer.parseInt(carID) > 0) {
                            CarIDValidity_Label.setText("");
                        } else {
                            carID = null;
                            CarIDValidity_Label.setText("                                                            ID cannot be '0' or negative !");
                        }
                    } catch (NumberFormatException ex) {
                        carID = null;
                        CarIDValidity_Label.setText("                                                            Invalid ID !");
                    }
                } else {
                    carID = null;
                    CarIDValidity_Label.setText("                                                            Enter Car ID !");
                }

                if (carID != null) {
                    car = Car.SearchByID(Integer.parseInt(carID));
                    if (car != null) {
                        Car_UpdateInner cui = new Car_UpdateInner();
                        cui.setVisible(true);
                        dispose();

                    } else {
                        JOptionPane.showMessageDialog(null, "Car ID not found !");
                    }
                } else {
                    CarIDValidity_Label.setText("                                                            Enter Car ID !");
                }
            }
        }
        );
        Cancel_Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Parent_JFrame.getMainFrame().setEnabled(true);
                dispose();
            }
        });
    }

    private class Car_UpdateInner extends JFrame {

        JButton Update_Button, Cancel_Button;
        JLabel Maker_Label, Name_Label, Color_Label, Type_Label, SeatingCapacity_Label, Model_Label, Condition_Label, RegNo_Label, RentPerHour_Label,
                OwnerID_Label,
                MakerValidity_Label, NameValidity_Label, RegNoValidity_Label, RentPerHourValidity_Label, OwnerIDValidity_Label;
        JTextField Maker_TextField, Name_TextField, RegNo_TextField, RentPerHour_TextField, OwnerID_TextField;
        JComboBox<String> Colour_ComboBox, Type_ComboBox, Model_ComboBox, Condition_ComboBox;
        JSpinner SeatingCapacity_Spinner;

        private CarOwner carOwner;

        public Car_UpdateInner() {
            super("Update Car");
            setLayout(new FlowLayout());
            setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

            setSize(new Dimension(450, 475));
            setResizable(false);
            setLocationRelativeTo(this);

            Update_Button = new JButton("Update");
            Cancel_Button = new JButton("Cancel");

            Maker_Label = new JLabel("Enter Maker");
            Name_Label = new JLabel("Enter Name");
            Color_Label = new JLabel("Enter Color");
            Model_Label = new JLabel("Enter Model");
            Type_Label = new JLabel("Enter Car type");
            SeatingCapacity_Label = new JLabel("Enter Seating capacity");
            RegNo_Label = new JLabel("Enter Reg no (ABC-0123)");
            OwnerID_Label = new JLabel("Enter Owner ID");
            RentPerHour_Label = new JLabel("Enter Rent Per Hour (in PKR)");
            Condition_Label = new JLabel("Condition");

            MakerValidity_Label = new JLabel();
            NameValidity_Label = new JLabel();
            RegNoValidity_Label = new JLabel();
            OwnerIDValidity_Label = new JLabel();
            RentPerHourValidity_Label = new JLabel();

            Maker_TextField = new JTextField();
            Name_TextField = new JTextField();
            RegNo_TextField = new JTextField();
            OwnerID_TextField = new JTextField();
            RentPerHour_TextField = new JTextField();

            String[] Colours = {"White", "Red", "Silver", "Blue", "Black"};
            // try to initialize array from text file so that new items can be added and can be updated
            Colour_ComboBox = new JComboBox<>(Colours);
            String[] Types = {"Familycar", "Comercial", "Microcar", "Compact car", "Mid-size car", "Supercar", "Convertible", "Sports cars"};
            Type_ComboBox = new JComboBox<>(Types);

            // Creating an array containing Years from Today's Year till 1950
            int TodaysYear = new Date().getYear() + 1900;
            int noOfYears = TodaysYear - 1949;
            String[] Years = new String[noOfYears];
            for (int i = 0; i < noOfYears; i++) {
                Years[i] = TodaysYear - i + "";
            }
            Model_ComboBox = new JComboBox<>(Years);

            String[] Conditions = {"Excellent", "Good", "Average", "Bad"};
            Condition_ComboBox = new JComboBox<>(Conditions);

            SeatingCapacity_Spinner = new JSpinner();
            SeatingCapacity_Spinner.setModel(new javax.swing.SpinnerNumberModel(4, 1, null, 1));
            SeatingCapacity_Spinner.setFocusable(false);

            Maker_TextField.setPreferredSize(new Dimension(240, 22));
            Name_TextField.setPreferredSize(new Dimension(240, 22));
            RegNo_TextField.setPreferredSize(new Dimension(240, 22));
            OwnerID_TextField.setPreferredSize(new Dimension(240, 22));
            RentPerHour_TextField.setPreferredSize(new Dimension(240, 22));

            Maker_Label.setPreferredSize(new Dimension(175, 22));
            Name_Label.setPreferredSize(new Dimension(175, 22));
            RegNo_Label.setPreferredSize(new Dimension(175, 22));
            OwnerID_Label.setPreferredSize(new Dimension(175, 22));
            RentPerHour_Label.setPreferredSize(new Dimension(175, 22));

            MakerValidity_Label.setPreferredSize(new Dimension(415, 9));
            NameValidity_Label.setPreferredSize(new Dimension(415, 9));
            RegNoValidity_Label.setPreferredSize(new Dimension(415, 9));
            OwnerIDValidity_Label.setPreferredSize(new Dimension(415, 9));
            RentPerHourValidity_Label.setPreferredSize(new Dimension(415, 9));

            SeatingCapacity_Spinner.setPreferredSize(new Dimension(50, 22));
            Update_Button.setPreferredSize(new Dimension(100, 22));
            Cancel_Button.setPreferredSize(new Dimension(100, 22));

            MakerValidity_Label.setForeground(Color.red);
            NameValidity_Label.setForeground(Color.red);
            RegNoValidity_Label.setForeground(Color.red);
            OwnerIDValidity_Label.setForeground(Color.red);
            RentPerHourValidity_Label.setForeground(Color.red);

            Maker_TextField.setText(car.getMaker());
            Name_TextField.setText(car.getName());
            RegNo_TextField.setText(car.getRegNo());
            OwnerID_TextField.setText(car.getCarOwner().getID() + "");
            RentPerHour_TextField.setText(car.getRentPerHour() + "");
            Model_ComboBox.setSelectedItem(car.getModel());
            Type_ComboBox.setSelectedItem(car.getType());
            SeatingCapacity_Spinner.setValue(car.getSeatingCapacity());
            Colour_ComboBox.setSelectedItem(car.getColour());
            Condition_ComboBox.setSelectedItem(car.getCondition());

//            car
            add(Maker_Label);
            add(Maker_TextField);
            add(MakerValidity_Label);

            add(Name_Label);
            add(Name_TextField);
            add(NameValidity_Label);

            add(RegNo_Label);
            add(RegNo_TextField);
            add(RegNoValidity_Label);

            add(OwnerID_Label);
            add(OwnerID_TextField);
            add(OwnerIDValidity_Label);

            add(RentPerHour_Label);
            add(RentPerHour_TextField);
            add(RentPerHourValidity_Label);

            add(Model_Label);
            add(Model_ComboBox);
            add(Type_Label);
            add(Type_ComboBox);
            add(SeatingCapacity_Label);
            add(SeatingCapacity_Spinner);
            add(Color_Label);
            add(Colour_ComboBox);
            add(Condition_Label);
            add(Condition_ComboBox);

            add(Update_Button);
            add(Cancel_Button);

            Update_Button.addActionListener(new ActionListener() {
                @Override

                public void actionPerformed(ActionEvent e) {

                    String Maker = Maker_TextField.getText().trim(),
                            Name = Name_TextField.getText().trim(),
                            RegNo = RegNo_TextField.getText().trim(),
                            OwnerID = OwnerID_TextField.getText().trim(),
                            RentPerHour = RentPerHour_TextField.getText().trim();

                    if (!Name.isEmpty()) {
                        if (Car.isNameValid(Name)) {
                            NameValidity_Label.setText("");
                        } else {
                            Name = null;
                            NameValidity_Label.setText("                                                            Invalid  Car Name !");
                        }
                    } else {
                        Name = null;
                        NameValidity_Label.setText("                                                            Enter Car Name !");
                    }
                    if (!Maker.isEmpty()) {
                        if (Car.isNameValid(Maker)) {
                            MakerValidity_Label.setText("");
                        } else {
                            Maker = null;
                            MakerValidity_Label.setText("                                                            Invalid Maker's Name !");
                        }
                    } else {
                        Maker = null;
                        MakerValidity_Label.setText("                                                            Enter Maker'sName !");
                    }
                    if (!RegNo.isEmpty()) {
                        if (Car.isRegNoValid(RegNo)) {
                            RegNoValidity_Label.setText("");
                            Car car2 = Car.SearchByRegNo(RegNo);
                            // checking if the newly entered regNo is already registered or not
                            if ((car2 != null) & (!RegNo.equalsIgnoreCase(car.getRegNo()))) {
                                RegNo = null;
                                JOptionPane.showMessageDialog(null, "This Car Registeration no is already registered !");
                            }
                        } else {
                            RegNo = null;
                            RegNoValidity_Label.setText("                                                            Invalid Reg no !");
                        }
                    } else {
                        RegNo = null;
                        RegNoValidity_Label.setText("                                                            Enter Reg No !");
                    }
                    if (!OwnerID.isEmpty()) {
                        try {
                            if (Integer.parseInt(OwnerID) > 0) {
                                OwnerIDValidity_Label.setText("");
                                carOwner = CarOwner.SearchByID(Integer.parseInt(OwnerID));
                                if (carOwner != null) {
                                    // if owner id is valid and owner exists 
                                    OwnerIDValidity_Label.setText("");
                                } else {
                                    OwnerID = null;
                                    JOptionPane.showMessageDialog(null, "Owner ID doesnot exists !");
                                }
                            } else {
                                OwnerID = null;
                                OwnerIDValidity_Label.setText("                                                            ID cannot be '0' or negative !");
                            }
                        } catch (NumberFormatException ex) {
                            OwnerID = null;
                            OwnerIDValidity_Label.setText("                                                            Invalid ID !");
                        }
                    } else {
                        OwnerID = null;
                        OwnerIDValidity_Label.setText("                                                            Enter Owner ID !");
                    }
                    if (!RentPerHour.isEmpty()) {
                        try {
                            if (Integer.parseInt(RentPerHour) > 0) {
                                RentPerHourValidity_Label.setText("");
                            } else {
                                RentPerHour = null;
                                RentPerHourValidity_Label.setText("                                                            Rent cannot be '0' or negative !");
                            }
                        } catch (NumberFormatException ex) {
                            RentPerHour = null;
                            RentPerHourValidity_Label.setText("                                                            Invalid Rent !");
                        }
                    } else {
                        RentPerHour = null;
                        RentPerHourValidity_Label.setText("                                                            Enter Rent !");
                    }

                    try {
                        if (Maker != null && Name != null && RegNo != null && OwnerID != null && RentPerHour != null) {
//new Car(ID, Maker, Name, Colour, Type, seatingCapacity, model, Condition, RegNo, RentPerHour, carOwner)
                            car = new Car(car.getID(), Maker, Name, Colour_ComboBox.getSelectedItem() + "",
                                    Type_ComboBox.getSelectedItem() + "", Integer.parseInt(SeatingCapacity_Spinner.getValue() + ""),
                                    Model_ComboBox.getSelectedItem() + "",
                                    Condition_ComboBox.getSelectedItem() + "",
                                    RegNo, Integer.parseInt(RentPerHour), carOwner);
                            car.Update();

                            Parent_JFrame.getMainFrame().getContentPane().removeAll();
                            Car_Details cd = new Car_Details();
                            Parent_JFrame.getMainFrame().add(cd.getMainPanel());
                            Parent_JFrame.getMainFrame().getContentPane().revalidate();

                            JOptionPane.showMessageDialog(null, "Record Successfully Updated !");

                            Parent_JFrame.getMainFrame().setEnabled(true);
                            dispose();

                        }
                    } catch (HeadlessException | NumberFormatException ex) {
                        System.out.println(ex);
                    }
                }
            }
            );
            Cancel_Button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    Parent_JFrame.getMainFrame().setEnabled(true);
                    dispose();
                }
            });
        }
    }
}

package GUI;

import BackendCode.CarOwner;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

public class CarOwner_Update {

    JButton OK_Button, Cancel_Button;
    JLabel ID_Label, IDValidity_Label;
    JTextField ID_TextField;
    JFrame frame = new JFrame();
    static CarOwner carOwner; // this carOwner object is used in UpdateCarOwner_Inner class to obtain the record for entered ID

    public CarOwner_Update() {
        frame.setTitle("Update CarOwner");
        frame.setLayout(new AbsoluteLayout());
        frame.setSize(new Dimension(450, 290));
        frame.setResizable(false);
        frame.setLocationRelativeTo(Parent_JFrame.getMainFrame());
        frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                Parent_JFrame.getMainFrame().setEnabled(true);
                frame.dispose();
            }
        });

        OK_Button = new JButton("OK");
        Cancel_Button = new JButton("Cancel");

        ID_Label = new JLabel("Enter ID to be Updated");
        IDValidity_Label = new JLabel();
        ID_TextField = new JTextField();

        ID_TextField.setPreferredSize(new Dimension(240, 22));

        ID_Label.setPreferredSize(new Dimension(175, 22));
        IDValidity_Label.setPreferredSize(new Dimension(240, 9));
        IDValidity_Label.setForeground(Color.red);
        frame.add(ID_Label, new AbsoluteConstraints(10, 5));
        frame.add(ID_TextField, new AbsoluteConstraints(195, 5));
        frame.add(IDValidity_Label, new AbsoluteConstraints(195, 30));
        frame.add(OK_Button, new AbsoluteConstraints(100, 225, 100, 22));
        frame.add(Cancel_Button, new AbsoluteConstraints(250, 225, 100, 22));

        OK_Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                CarOwner CO = new CarOwner();
                String ID = ID_TextField.getText().trim();
                if (!ID_TextField.getText().isEmpty()) {
                    if (CarOwner.isIDvalid(ID)) {
                        CO.setID(Integer.parseInt(ID));
                        carOwner = CarOwner.SearchByID(Integer.parseInt(ID)); // the ID of this object is used in UpdateManage_GUI_B class. that is why it is kept static
                        if (carOwner != null) {
                            Parent_JFrame.getMainFrame().setEnabled(false);
                            frame.dispose();
                            new UpdateCarOwner_Inner().setVisible(true);
                        } else {
                            JOptionPane.showMessageDialog(null, "Required ID is not found !");
                        }
                    } else {
                        IDValidity_Label.setText("Invalid ID !");
                    }
                } else {
                    IDValidity_Label.setText("Enter ID !");
                }
            }
        });

        Cancel_Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Parent_JFrame.getMainFrame().setEnabled(true);
                frame.dispose();
            }
        });
    }

    public class UpdateCarOwner_Inner extends JFrame {

        JButton Update_Button, Cancel_Button;
        JLabel CNIC_Label, Name_Label, Contact_Label, Email_Label, UserName_Label, Password_Label, CNICValidity_Label, contactValidity_Label, NameValidity_Label, EmailValidity_Label, UserNameValidity_Label, PasswordValidity_Label;
        JTextField CNIC_TextField, Name_TextField, Contact_TextField, Email_TextField, UserName_TextField, Password_TextField;

        public UpdateCarOwner_Inner() {
            super("Update CarOwner");
            setLayout(new AbsoluteLayout());
            setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

            setSize(new Dimension(450, 290));
            setResizable(false);
            setLocationRelativeTo(this);
            Update_Button = new JButton("Update");
            Cancel_Button = new JButton("Cancel");

            CNIC_Label = new JLabel("Enter CNIC (without dashes)");
            Name_Label = new JLabel("Enter Name");
            Contact_Label = new JLabel("Enter Contact");
            CNICValidity_Label = new JLabel();
            NameValidity_Label = new JLabel();
            contactValidity_Label = new JLabel();
            CNIC_TextField = new JTextField(carOwner.getCNIC());
            Name_TextField = new JTextField(carOwner.getName());
            Contact_TextField = new JTextField(carOwner.getContact_No());

            CNIC_TextField.setPreferredSize(new Dimension(240, 22));
            Name_TextField.setPreferredSize(new Dimension(240, 22));
            Contact_TextField.setPreferredSize(new Dimension(240, 22));

            CNIC_Label.setPreferredSize(new Dimension(175, 22));
            Name_Label.setPreferredSize(new Dimension(175, 22));
            Contact_Label.setPreferredSize(new Dimension(175, 22));
            CNICValidity_Label.setPreferredSize(new Dimension(240, 9));
            contactValidity_Label.setPreferredSize(new Dimension(240, 9));
            NameValidity_Label.setPreferredSize(new Dimension(240, 9));

            CNICValidity_Label.setForeground(Color.red);
            contactValidity_Label.setForeground(Color.red);
            NameValidity_Label.setForeground(Color.red);

            add(CNIC_Label, new AbsoluteConstraints(10, 5));
            add(CNIC_TextField, new AbsoluteConstraints(195, 5));
            add(CNICValidity_Label, new AbsoluteConstraints(195, 30));
            add(Name_Label, new AbsoluteConstraints(10, 42));
            add(Name_TextField, new AbsoluteConstraints(195, 42));
            add(NameValidity_Label, new AbsoluteConstraints(195, 66));
            add(Contact_Label, new AbsoluteConstraints(10, 77));
            add(Contact_TextField, new AbsoluteConstraints(195, 77));
            add(contactValidity_Label, new AbsoluteConstraints(195, 102));
            add(Update_Button, new AbsoluteConstraints(100, 225, 100, 22));
            add(Cancel_Button, new AbsoluteConstraints(250, 225, 100, 22));

            Update_Button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    String cnic = CNIC_TextField.getText().trim();
                    String name = Name_TextField.getText().trim();
                    String contact = Contact_TextField.getText().trim();
                    if (!cnic.isEmpty()) {
                        System.out.println("cnic is not empty");
                        if (CarOwner.isCNICValid(cnic)) {
                            System.out.println("CNIC is valid");
                            CarOwner CO = CarOwner.SearchByCNIC(cnic);
                            if (CO != null) {
                                if (cnic.equals(carOwner.getCNIC())) {
                                    System.out.println("no change in cnic");
                                } else {
                                    cnic = null;
                                    JOptionPane.showMessageDialog(null, "This CNIC is already registered !");
                                }
                            } else { // when CarOwner.SearchCNIC(M) returned null
                                System.out.println("new CNIC is entered");
                            }
                        } else {
                            cnic = null;
                            CNICValidity_Label.setText("Invalid CNIC !");
                        }
                    } else {
                        cnic = null;
                        CNICValidity_Label.setText("Enter CNIC !");
                    }
                    if (!name.isEmpty()) {
                        if (CarOwner.isNameValid(name)) {
                            System.out.println("valid car owner name !");
                        } else {
                            name = null;
                            NameValidity_Label.setText("Invalid Name !");
                        }
                    } else {
                        name = null;
                        NameValidity_Label.setText("Enter Name !");
                    }
                    if (!contact.isEmpty()) {
                        if (CarOwner.isContactNoValid(contact)) {
                            System.out.println("Valid car owner contact !");
                        } else {
                            contact = null;
                            contactValidity_Label.setText("Invalid Contact Number!");
                        }
                    } else {
                        contact = null;
                        contactValidity_Label.setText("Enter Contact Number !");
                    }
                    System.out.println("the value of cnic before null condition is " + cnic);
                    if (cnic != null && name != null && contact != null) {
                        carOwner = new CarOwner(carOwner.getBalance(), carOwner.getID(), cnic, name, contact);
                        System.out.println(carOwner.toString());
                        carOwner.Update();
                        Parent_JFrame.getMainFrame().getContentPane().removeAll();
                        CarOwner_Details cd = new CarOwner_Details();
                        Parent_JFrame.getMainFrame().add(cd.getMainPanel());
                        Parent_JFrame.getMainFrame().getContentPane().revalidate();
                        JOptionPane.showMessageDialog(null, "Record Successfully Updated !");
                        Parent_JFrame.getMainFrame().setEnabled(true);
                        dispose();
                    }
                }
            });

            Cancel_Button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    Parent_JFrame.getMainFrame().setEnabled(true);
                    dispose();
                }
            });
        }

    }

}

package GUI;

import BackendCode.Car;
import BackendCode.CarOwner;
import java.awt.*;
import java.awt.event.*;
import java.util.Date;
import javax.swing.*;

/**
 *
 * @author @AbdullahShahid01
 */
public class Car_Add extends JFrame {

    JButton Add_Button, Cancel_Button;
    JLabel Maker_Label, Name_Label, Color_Label, Type_Label, SeatingCapacity_Label, Model_Label, Condition_Label, RegNo_Label, RentPerHour_Label,
            OwnerID_Label,
            MakerValidity_Label, NameValidity_Label, RegNoValidity_Label, RentPerHourValidity_Label, OwnerIDValidity_Label;
    JTextField Maker_TextField, Name_TextField, RegNo_TextField, RentPerHour_TextField, OwnerID_TextField;
    JComboBox<String> Colour_ComboBox, Type_ComboBox, Model_ComboBox, Condition_ComboBox;
    JSpinner SeatingCapacity_Spinner;

    public Car_Add() {
        super("Add Car");
        setLayout(new FlowLayout());
        setSize(new Dimension(450, 475));
        setResizable(false);
        setLocationRelativeTo(this);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                Parent_JFrame.getMainFrame().setEnabled(true);
                dispose();
            }
        });

        Add_Button = new JButton("Add");
        Cancel_Button = new JButton("Cancel");

        Maker_Label = new JLabel("Maker");
        Name_Label = new JLabel("Name");
        Color_Label = new JLabel("Color");
        Model_Label = new JLabel("Model");
        Type_Label = new JLabel("Car type");
        SeatingCapacity_Label = new JLabel("Seating capacity");
        RegNo_Label = new JLabel("Reg no (ABC-0123)");
        OwnerID_Label = new JLabel("Owner ID");
        RentPerHour_Label = new JLabel("Rent Per Hour (in PKR)");
        Condition_Label = new JLabel("Condition ");

        MakerValidity_Label = new JLabel();
        NameValidity_Label = new JLabel();
        RegNoValidity_Label = new JLabel();
        OwnerIDValidity_Label = new JLabel();
        RentPerHourValidity_Label = new JLabel();

        Maker_TextField = new JTextField();
        Name_TextField = new JTextField();
        RegNo_TextField = new JTextField();
        OwnerID_TextField = new JTextField();
        RentPerHour_TextField = new JTextField();

        String[] Colours = {"White", "Red", "Silver", "Blue", "Black"};
        // try to initialize array from text file so that new items can be added and can be updated
        Colour_ComboBox = new JComboBox<>(Colours);
        String[] Types = {"Familycar", "Comercial", "Microcar", "Compact car", "Mid-size car", "Supercar", "Convertible", "Sports cars"};
        Type_ComboBox = new JComboBox<>(Types);

        // Creating an array containing Years from Today's Year till 1950
        int TodaysYear = new Date().getYear() + 1900;
        int noOfYears = TodaysYear - 1949;
        String[] Years = new String[noOfYears];
        for (int i = 0; i < noOfYears; i++) {
            Years[i] = TodaysYear - i + "";
        }
        Model_ComboBox = new JComboBox<>(Years);

        String[] Conditions = {"Excellent", "Good", "Average", "Bad"};
        Condition_ComboBox = new JComboBox<>(Conditions);

        SeatingCapacity_Spinner = new JSpinner();
        SeatingCapacity_Spinner.setModel(new SpinnerNumberModel(4, 1, null, 1));
        SeatingCapacity_Spinner.setFocusable(false);

        Maker_TextField.setPreferredSize(new Dimension(240, 22));
        Name_TextField.setPreferredSize(new Dimension(240, 22));
        RegNo_TextField.setPreferredSize(new Dimension(240, 22));
        OwnerID_TextField.setPreferredSize(new Dimension(240, 22));
        RentPerHour_TextField.setPreferredSize(new Dimension(240, 22));

        Maker_Label.setPreferredSize(new Dimension(175, 22));
        Name_Label.setPreferredSize(new Dimension(175, 22));
        RegNo_Label.setPreferredSize(new Dimension(175, 22));
        OwnerID_Label.setPreferredSize(new Dimension(175, 22));
        RentPerHour_Label.setPreferredSize(new Dimension(175, 22));

        MakerValidity_Label.setPreferredSize(new Dimension(415, 9));
        NameValidity_Label.setPreferredSize(new Dimension(415, 9));
        RegNoValidity_Label.setPreferredSize(new Dimension(415, 9));
        OwnerIDValidity_Label.setPreferredSize(new Dimension(415, 9));
        RentPerHourValidity_Label.setPreferredSize(new Dimension(415, 9));

        SeatingCapacity_Spinner.setPreferredSize(new Dimension(50, 22));
        Add_Button.setPreferredSize(new Dimension(100, 22));
        Cancel_Button.setPreferredSize(new Dimension(100, 22));

        MakerValidity_Label.setForeground(Color.red);
//        MakerValidity_Label.setFont(new Font("Serif", 1, 10));
//        MakerValidity_Label.setText("                                                           MakerValidity_Label");
        NameValidity_Label.setForeground(Color.red);
//        NameValidity_Label.setText("                                                            NameValidity_Label");
        RegNoValidity_Label.setForeground(Color.red);
//        RegNoValidity_Label.setText("RegNoValidity_Label");
        OwnerIDValidity_Label.setForeground(Color.red);
//        OwnerIDValidity_Label.setText("OwnerValidity_Label");
        RentPerHourValidity_Label.setForeground(Color.red);
//        RentPerHourValidity_Label.setText("RentPerHourValidity_Label");

        add(Maker_Label);
        add(Maker_TextField);
        add(MakerValidity_Label);

        add(Name_Label);
        add(Name_TextField);
        add(NameValidity_Label);

        add(RegNo_Label);
        add(RegNo_TextField);
        add(RegNoValidity_Label);

        add(OwnerID_Label);
        add(OwnerID_TextField);
        add(OwnerIDValidity_Label);

        add(RentPerHour_Label);
        add(RentPerHour_TextField);
        add(RentPerHourValidity_Label);

        add(Model_Label);
        add(Model_ComboBox);
        add(Type_Label);
        add(Type_ComboBox);
        add(SeatingCapacity_Label);
        add(SeatingCapacity_Spinner);
        add(Color_Label);
        add(Colour_ComboBox);
        add(Condition_Label);
        add(Condition_ComboBox);

        add(Add_Button);
        add(Cancel_Button);

        Add_Button.addActionListener(new ActionListener() {
            @Override

            public void actionPerformed(ActionEvent e) {

                String maker = Maker_TextField.getText().trim(),
                        name = Name_TextField.getText().trim(),
                        regNo = RegNo_TextField.getText().trim(),
                        ownerID = OwnerID_TextField.getText().trim(),
                        rentPerHour = RentPerHour_TextField.getText().trim();

                if (!name.isEmpty()) {
                    if (Car.isNameValid(Name_TextField.getText().trim())) {
                        NameValidity_Label.setText("");
//                        name = Name_TextField.getText().trim();
                    } else {
                        name = null;
                        NameValidity_Label.setText("                                                            Invalid  Car Name !");
                    }
                } else {
                    name = null;
                    NameValidity_Label.setText("                                                            Enter Car Name !");
                }
                if (!maker.isEmpty()) {
                    if (Car.isNameValid(maker)) {
                        MakerValidity_Label.setText("");
//                        maker = Maker_TextField.getText().trim();
                    } else {
                        maker = null;
                        MakerValidity_Label.setText("                                                            Invalid Maker's Name !");
                    }
                } else {
                    maker = null;
                    MakerValidity_Label.setText("                                                            Enter Maker'sName !");
                }
                if (!regNo.isEmpty()) {
                    if (Car.isRegNoValid(regNo)) {
                        RegNoValidity_Label.setText("");
                    } else {
                        regNo = null;
                        RegNoValidity_Label.setText("                                                            Invalid Reg no !");
                    }
                } else {
                    regNo = null;
                    RegNoValidity_Label.setText("                                                            Enter Reg No !");
                }
                if (!ownerID.isEmpty()) {
                    try {
                        if (Integer.parseInt(ownerID) > 0) {
                            OwnerIDValidity_Label.setText("");
//                            ownerID = OwnerID_TextField.getText().trim();
                        } else {
                            ownerID = null;
                            OwnerIDValidity_Label.setText("                                                            ID cannot be '0' or negative !");
                        }
                    } catch (NumberFormatException ex) {
                        System.out.println("In GUI.Car_Add: " + ex);
                        ownerID = null;
                        OwnerIDValidity_Label.setText("                                                            Invalid ID !");
                    }
                } else {
                    ownerID = null;
                    OwnerIDValidity_Label.setText("                                                            Enter Owner ID !");
                }
                if (!rentPerHour.isEmpty()) {
                    try {
                        if (Integer.parseInt(rentPerHour) > 0) {
                            RentPerHourValidity_Label.setText("");
                        } else {
                            rentPerHour = null;
                            RentPerHourValidity_Label.setText("                                                            Rent cannot be '0' or negative !");
                        }
                    } catch (NumberFormatException ex) {

                        rentPerHour = null;
                        RentPerHourValidity_Label.setText("                                                            Invalid Rent !");
                    }

                } else {
                    rentPerHour = null;
                    RentPerHourValidity_Label.setText("                                                            Enter Rent !");
                }

//Car(id, maker, name, color, Type, seatingCapacity, model, condition, regNo, rentPerHour, carOwner);
                try {
                    if (maker != null && name != null && regNo != null && ownerID != null && rentPerHour != null) {
                        CarOwner carOwner = CarOwner.SearchByID(Integer.parseInt(ownerID));

                        Car car = Car.SearchByRegNo(regNo);

                        if (carOwner != null) {
                            if (car == null) {
                                //Car(id, Maker, Name, Colour, Type, SeatingCapacity, Model, Condition, RegNo, RentPerHour, carOwner)
                                // id is auto
                                car = new Car(0, maker, name, Colour_ComboBox.getSelectedItem() + "",
                                        Type_ComboBox.getSelectedItem() + "",
                                        Integer.parseInt(SeatingCapacity_Spinner.getValue().toString()),
                                        Model_ComboBox.getSelectedItem() + "",
                                        Condition_ComboBox.getSelectedItem() + "",
                                        regNo, Integer.parseInt(rentPerHour), carOwner);
                                car.Add();
                                
                                Parent_JFrame.getMainFrame().getContentPane().removeAll();
                                Car_Details cd = new Car_Details();
                                Parent_JFrame.getMainFrame().add(cd.getMainPanel());
                                Parent_JFrame.getMainFrame().getContentPane().revalidate();
                                JOptionPane.showMessageDialog(null, "Record Successfully Added !");
                                Parent_JFrame.getMainFrame().setEnabled(true);
                                dispose();
                            } else {
                                JOptionPane.showMessageDialog(null, "This Car Registeration no is already registered !");
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Owner ID doesnot exists !");
                        }
                    }
                } catch (HeadlessException | NumberFormatException ex) {
                    System.out.println(ex);
                }
            }
        }
        );
        Cancel_Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Parent_JFrame.getMainFrame().setEnabled(true);
                dispose();
            }
        });
    }
}

package GUI;

import BackendCode.Booking;
import BackendCode.Car;
import BackendCode.Customer;
import java.awt.Dimension;
import javax.swing.table.DefaultTableModel;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;

public class Booking_Details {

    private static DefaultTableModel tablemodel; // it is made static so that it can be accessed in add GUI class to update the Jtable when a new record is added

    private static JButton SearchCustomerID_Button, SearchCarRegNo_Button,
            BackButton, LogoutButton, BookCar_Button, UnbookCar_Button;
    private static JTextField CustomerID_TextField, CarRegNo_TextField;
    private static JScrollPane jScrollPane1;
    private static JTable jTable1;
    private JPanel MainPanel;

    public Booking_Details() {
        MainPanel = new JPanel();
        Parent_JFrame.getMainFrame().setTitle("Booking Details - Rent-A-Car Management System");
        MainPanel.setLayout(new AbsoluteLayout());
        MainPanel.setMinimumSize(new Dimension(1366, 730));

        SearchCustomerID_Button = new JButton("Search by Customer ID");
        SearchCarRegNo_Button = new JButton("Search by Car RegNo");
        BackButton = new JButton("Back");
        LogoutButton = new JButton("Logout");
        BookCar_Button = new JButton("Book");
        UnbookCar_Button = new JButton("Unbook");

        CustomerID_TextField = new JTextField();
        CarRegNo_TextField = new JTextField();

        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();
//ID,  Maker,  Name,  Colour,  Type,  SeatingCapacity,  Model,  Condition,  RegNo, RentPerHour,  IsRented RentDate, carOwner customer

        String[] columns = {"Sr#", "ID", "Customer ID+Name", "Car Name", "Rent Time", "Return Time"};
        tablemodel = new DefaultTableModel(columns, 0) {

            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };

        jTable1 = new JTable(getTablemodel());
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jScrollPane1 = new JScrollPane();
        jScrollPane1.setViewportView(jTable1);
        jTable1.setFillsViewportHeight(true);// makes the size of table equal to that of scroll pane to fill the table in the scrollpane
        ArrayList<Booking> Booking_objects = Booking.View();
        for (int i = 0; i < Booking_objects.size(); i++) {
//ID,  Maker,  Name,  Colour,  Type,  SeatingCapacity,  Model,  Condition,  RegNo, 
//RentPerHour,  IsRented RentDate, carOwner customer
            int ID = Booking_objects.get(i).getID();
            String customer_ID_Name = Booking_objects.get(i).getCustomer().getID()
                    + ": " + Booking_objects.get(i).getCustomer().getName();
            String carName = Booking_objects.get(i).getCar().getName();
            String carID = Booking_objects.get(i).getCar().getID()+"";
            SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm a dd-MM-yyyy");
            Date rentime = new Date(Booking_objects.get(i).getRentTime());
            String rentTime = dateFormat.format(rentime);

            long returnTime_ = Booking_objects.get(i).getReturnTime();
            String returnTime;
            if (returnTime_ != 0) {
                Date returntime = new Date(returnTime_);
                returnTime = dateFormat.format(returntime);
            } else {
                returnTime = "Not returned yet !";
            }

            String[] one_s_Record = {((i + 1) + ""), "" + ID, customer_ID_Name, carID+": "+carName, rentTime, returnTime};
            tablemodel.addRow(one_s_Record);
        }

        // center aligning the text in all the columns
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        jTable1.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);

        // adjusting size of each column
        jTable1.getColumnModel().getColumn(0).setMinWidth(80);
        jTable1.getColumnModel().getColumn(1).setMinWidth(80);
        jTable1.getColumnModel().getColumn(2).setMinWidth(400);
        jTable1.getColumnModel().getColumn(3).setMinWidth(300);
        jTable1.getColumnModel().getColumn(4).setMinWidth(230);
        jTable1.getColumnModel().getColumn(5).setMinWidth(235);

        jTable1.getTableHeader().setReorderingAllowed(false);

        MainPanel.add(jScrollPane1, new AbsoluteConstraints(10, 60, 1330, 550));
        MainPanel.add(BackButton, new AbsoluteConstraints(1106, 625, 100, 22));
        MainPanel.add(LogoutButton, new AbsoluteConstraints(1236, 625, 100, 22));
        MainPanel.add(BookCar_Button, new AbsoluteConstraints(10, 625, 130, 22));
        MainPanel.add(UnbookCar_Button, new AbsoluteConstraints(160, 625, 130, 22));

        MainPanel.add(SearchCarRegNo_Button, new AbsoluteConstraints(10, 15, 160, 22));
        MainPanel.add(CarRegNo_TextField, new AbsoluteConstraints(185, 15, 240, 22));
        MainPanel.add(SearchCustomerID_Button, new AbsoluteConstraints(440, 15, 180, 22));
        MainPanel.add(CustomerID_TextField, new AbsoluteConstraints(635, 15, 240, 22));

        SearchCustomerID_Button.addActionListener(new Booking_Details_ActionListener());
        SearchCarRegNo_Button.addActionListener(new Booking_Details_ActionListener());
        BackButton.addActionListener(new Booking_Details_ActionListener());
        LogoutButton.addActionListener(new Booking_Details_ActionListener());
        BookCar_Button.addActionListener(new Booking_Details_ActionListener());
        UnbookCar_Button.addActionListener(new Booking_Details_ActionListener());
    }

    public static DefaultTableModel getTablemodel() {
        return tablemodel;
    }

    public JPanel getMainPanel() {
        return MainPanel;
    }

    private class Booking_Details_ActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {

            switch (e.getActionCommand()) {

                case "Back": {
                    Parent_JFrame.getMainFrame().setTitle("Rent-A-Car Management System [REBORN]");
                    MainMenu mm = new MainMenu();
                    Parent_JFrame.getMainFrame().getContentPane().removeAll();
                    Parent_JFrame.getMainFrame().add(mm.getMainPanel());
                    Parent_JFrame.getMainFrame().getContentPane().revalidate();
                }
                break;
                case "Logout": {
                    Parent_JFrame.getMainFrame().dispose();
                    Runner r = new Runner();
                    JFrame frame = r.getFrame();
                    Login login = new Login();
                    JPanel panel = login.getMainPanel();
                    frame.add(panel);
                    frame.setVisible(true);
                }
                break;
                case "Book": {
                    if (!Booking.getUnbookedCars().isEmpty()) {
                        Parent_JFrame.getMainFrame().setEnabled(false);
                        Booking_BookCar ac = new Booking_BookCar();
                        ac.setVisible(true);
                    } else {
                        JOptionPane.showMessageDialog(null, "No UnBooked Cars are available !");
                    }
                }
                break;
                case "Unbook": {
                    if (!Booking.getBookedCars().isEmpty()) {
                        Parent_JFrame.getMainFrame().setEnabled(false);
                        Booking_UnBookCar ac = new Booking_UnBookCar();
                        ac.setVisible(true);
                    } else {
                        JOptionPane.showMessageDialog(null, "No Booked Cars found !");
                    }
                }
                break;
                case "Search by Customer ID": {
                    String customerID = CustomerID_TextField.getText().trim();
                    if (!customerID.isEmpty()) {
                        if (Customer.isIDvalid(customerID)) {
                            Customer customer = Customer.SearchByID(Integer.parseInt(customerID));
                            if (customer != null) {
                                ArrayList<Booking> bookings = Booking.SearchByCustomerID(Integer.parseInt(customerID));
                                if (!bookings.isEmpty()) {
                                    JOptionPane.showMessageDialog(null, bookings.toString());
                                } else {
                                    JOptionPane.showMessageDialog(null, "This Customer has not booked any cars yet !");
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Customer ID not found !");
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Invalid Customer ID !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Enter Customer ID first !");
                    }
                    CustomerID_TextField.setText("");
                }
                break;
                case "Search by Car RegNo": {
                    String carRegNo = CarRegNo_TextField.getText().trim();
                    if (!carRegNo.isEmpty()) {
                        if (Car.isRegNoValid(carRegNo)) {
                            Car car = Car.SearchByRegNo(carRegNo);
                            if (car != null) {
                                ArrayList<Booking> bookings = Booking.SearchByCarRegNo(carRegNo);
                                if (!bookings.isEmpty()) {
                                    JOptionPane.showMessageDialog(null, bookings.toString());
                                } else {
                                    JOptionPane.showMessageDialog(null, "This Car is not booked yet !");
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Registeration no. not found !");
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Invalid Registeration no !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Enter Car Registeration No first !");
                    }
                    CustomerID_TextField.setText("");
                }
                break;
            }
        }
    }
}

package GUI;

import BackendCode.Car;
import BackendCode.CarOwner;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import javax.swing.*;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

public class CarOwner_Remove {

    JButton Remove_Button, Cancel_Button;
    JLabel ID_Label, IDValidity_Label;
    JTextField ID_TextField;
    JFrame frame = new JFrame();

    public CarOwner_Remove() {
        frame.setTitle("Remove CarOwner");
        frame.setLayout(new AbsoluteLayout());
        frame.setSize(new Dimension(450, 290));
        frame.setResizable(false);
        frame.setLocationRelativeTo(Parent_JFrame.getMainFrame());
        frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                Parent_JFrame.getMainFrame().setEnabled(true);
                frame.dispose();
            }
        });

        Remove_Button = new JButton("Remove");
        Cancel_Button = new JButton("Cancel");

        ID_Label = new JLabel("Enter ID (without dashes)");
        IDValidity_Label = new JLabel();
        ID_TextField = new JTextField();

        ID_TextField.setPreferredSize(new Dimension(240, 22));

        ID_Label.setPreferredSize(new Dimension(175, 22));
        IDValidity_Label.setPreferredSize(new Dimension(240, 9));
        IDValidity_Label.setForeground(Color.red);
        frame.add(ID_Label, new AbsoluteConstraints(10, 5));
        frame.add(ID_TextField, new AbsoluteConstraints(195, 5));
//        IDValidity_Label.setText("Invalid ID !");
        frame.add(IDValidity_Label, new AbsoluteConstraints(195, 30));
        frame.add(Remove_Button, new AbsoluteConstraints(100, 225, 100, 22));
        frame.add(Cancel_Button, new AbsoluteConstraints(250, 225, 100, 22));

        Remove_Button.addActionListener(new CarOwner_Remove_ActionListener());

        Cancel_Button.addActionListener(new CarOwner_Remove_ActionListener());
    }
    private class CarOwner_Remove_ActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            switch (e.getActionCommand()) {
                case "Remove": {
                    String id = ID_TextField.getText().trim();
                    if (CarOwner.isIDvalid(id)) {
                        CarOwner carOwner = CarOwner.SearchByID(Integer.parseInt(id));
                        if (carOwner != null) {
                            int showConfirmDialog = JOptionPane.showConfirmDialog(frame, "You are about to remove the following Car Owner.\n"+carOwner.toString()+"\nAll the data including Cars and Balance for this car owner will also be deleted  !"
                                    + "\n Are you sure you want to continue ??", "Remove Car Owner", JOptionPane.OK_CANCEL_OPTION);
                            if (showConfirmDialog == 0) {
                                // ** Delete all cars for this car owner **
                                ArrayList<Car> cars = carOwner.getAllCars();
                                System.out.println("Deleting all cars for this car owner !");
                                for (int i = 0; i < cars.size(); i++) {
                                    cars.get(i).Remove();
                                }
                                System.out.println("All cars deleted !");
                                carOwner.Remove();
                                System.out.println("Car owner deleted !");
                                Parent_JFrame.getMainFrame().getContentPane().removeAll();
                                CarOwner_Details cd = new CarOwner_Details();
                                Parent_JFrame.getMainFrame().add(cd.getMainPanel());
                                Parent_JFrame.getMainFrame().getContentPane().revalidate();
                                JOptionPane.showMessageDialog(null, "Record successfully Removed !");
                                Parent_JFrame.getMainFrame().setEnabled(true);
                                frame.dispose();
                            } else {

                                frame.setEnabled(true);
                            }

                        } else {
                            JOptionPane.showMessageDialog(null, "This ID does not exists !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Enter a valid ID !\n(A valid ID is an integer number greater than 0)");
                    }
                    break;
                }
                case "Cancel": {
                    Parent_JFrame.getMainFrame().setEnabled(true);
                    frame.dispose();
                    break;
                }
            }
        }
    }
}

package GUI;

import BackendCode.Customer;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

public class Customer_Add {

    JButton Add_Button, Cancel_Button;
    JLabel CNIC_Label, Name_Label, Contact_Label, Email_Label, UserName_Label, Password_Label, CNICValidity_Label, contactValidity_Label, NameValidity_Label, EmailValidity_Label, UserNameValidity_Label, PasswordValidity_Label;
    JTextField CNIC_TextField, Name_TextField, Contact_TextField, Email_TextField, UserName_TextField, Password_TextField;
    JFrame frame = new JFrame();

    public Customer_Add() {
        frame.setTitle("Add Customer");
        frame.setLayout(new AbsoluteLayout());
        frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        frame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                Parent_JFrame.getMainFrame().setEnabled(true);
                frame.dispose();
            }
        });

        frame.setSize(new Dimension(450, 290));
        frame.setResizable(false);
        frame.setLocationRelativeTo(Parent_JFrame.getMainFrame());

        Add_Button = new JButton("Add");
        Cancel_Button = new JButton("Cancel");

        CNIC_Label = new JLabel("Enter CNIC (without dashes)");
        Name_Label = new JLabel("Enter Name");
        Contact_Label = new JLabel("Enter Contact");
        Email_Label = new JLabel("Enter Email");
        UserName_Label = new JLabel("Enter Username");
        Password_Label = new JLabel("Enter Password");
        CNICValidity_Label = new JLabel();
        NameValidity_Label = new JLabel();
        EmailValidity_Label = new JLabel();
        UserNameValidity_Label = new JLabel();
        PasswordValidity_Label = new JLabel();
        contactValidity_Label = new JLabel();
        CNIC_TextField = new JTextField();
        Name_TextField = new JTextField();
        Contact_TextField = new JTextField();
        Email_TextField = new JTextField();
        UserName_TextField = new JTextField();
        Password_TextField = new JTextField();

        CNIC_TextField.setPreferredSize(new Dimension(240, 22));
        Name_TextField.setPreferredSize(new Dimension(240, 22));
        Contact_TextField.setPreferredSize(new Dimension(240, 22));
        Email_TextField.setPreferredSize(new Dimension(240, 22));
        UserName_TextField.setPreferredSize(new Dimension(240, 22));
        Password_TextField.setPreferredSize(new Dimension(240, 22));

        CNIC_Label.setPreferredSize(new Dimension(175, 22));
        Name_Label.setPreferredSize(new Dimension(175, 22));
        Contact_Label.setPreferredSize(new Dimension(175, 22));
        Email_Label.setPreferredSize(new Dimension(175, 22));
        UserName_Label.setPreferredSize(new Dimension(175, 22));
        Password_Label.setPreferredSize(new Dimension(175, 22));
        CNICValidity_Label.setPreferredSize(new Dimension(240, 9));
        contactValidity_Label.setPreferredSize(new Dimension(240, 9));
        NameValidity_Label.setPreferredSize(new Dimension(240, 9));
        EmailValidity_Label.setPreferredSize(new Dimension(240, 9));
        UserNameValidity_Label.setPreferredSize(new Dimension(240, 9));
        PasswordValidity_Label.setPreferredSize(new Dimension(240, 9));

        CNICValidity_Label.setForeground(Color.red);
        contactValidity_Label.setForeground(Color.red);
        NameValidity_Label.setForeground(Color.red);
        EmailValidity_Label.setForeground(Color.red);
        UserNameValidity_Label.setForeground(Color.red);
        PasswordValidity_Label.setForeground(Color.red);

        frame.add(CNIC_Label, new AbsoluteConstraints(10, 5));
        frame.add(CNIC_TextField, new AbsoluteConstraints(195, 5));
        frame.add(CNICValidity_Label, new AbsoluteConstraints(195, 30));

        frame.add(Name_Label, new AbsoluteConstraints(10, 42));
        frame.add(Name_TextField, new AbsoluteConstraints(195, 42));
        frame.add(NameValidity_Label, new AbsoluteConstraints(195, 66));

        frame.add(Contact_Label, new AbsoluteConstraints(10, 77));
        frame.add(Contact_TextField, new AbsoluteConstraints(195, 77));
        frame.add(contactValidity_Label, new AbsoluteConstraints(195, 102));

        frame.add(Add_Button, new AbsoluteConstraints(100, 225, 100, 22));
        frame.add(Cancel_Button, new AbsoluteConstraints(250, 225, 100, 22));

        Add_Button.addActionListener(new Customer_Add_ActionListener());

        Cancel_Button.addActionListener(new Customer_Add_ActionListener());
    }

    private class Customer_Add_ActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            switch (e.getActionCommand()) {
                case "Add": {
                    String cnic = CNIC_TextField.getText().trim();
                    String name = Name_TextField.getText().trim();
                    String contact = Contact_TextField.getText().trim();

                    if (Customer.isCNICValid(cnic)) {
                        Customer customer = Customer.SearchByCNIC(cnic);
                        if (customer == null) {
                            if (Customer.isNameValid(name)) {
                                if (Customer.isContactNoValid(contact)) {
                                    new Customer(0, 0, cnic, name, contact).Add(); // ID is Auto
                                    Parent_JFrame.getMainFrame().getContentPane().removeAll();
                                    Customer_Details cd = new Customer_Details();
                                    Parent_JFrame.getMainFrame().add(cd.getMainPanel());
                                    Parent_JFrame.getMainFrame().getContentPane().revalidate();
                                    Parent_JFrame.getMainFrame().setEnabled(true);
                                    JOptionPane.showMessageDialog(null, "Customer added successfully !");
                                    frame.dispose();
                                } else {
                                    JOptionPane.showMessageDialog(null, "Invalid contact no. !");
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Invalid Name !");
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "This CNIC is already registered !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid CNIC");
                    }
                    break;
                }
                case "Cancel": {
                    Parent_JFrame.getMainFrame().setEnabled(true);
                    frame.dispose();
                    break;
                }
            }
        }

    }
}

package GUI;

import BackendCode.Car;
import BackendCode.Car;
import java.awt.*;
import java.awt.event.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.*;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

/**
 *
 * @author @AbdullahShahid01
 */
public class Car_Remove extends JFrame {

    JButton Remove_Button, Cancel_Button;
    JLabel CarID_Label, CarIDValidity_Label;
    JTextField CarID_TextField;

    private Car car;

    public Car_Remove() {
        super("Remove Car");
        setLayout(new FlowLayout());
        setSize(new Dimension(300, 140));
        setResizable(false);
        setLocationRelativeTo(this);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                Parent_JFrame.getMainFrame().setEnabled(true);
                dispose();
            }
        });

        Remove_Button = new JButton("Remove");
        Cancel_Button = new JButton("Cancel");

        CarID_Label = new JLabel("Enter Car ID to be removed");
        CarIDValidity_Label = new JLabel();
        CarID_TextField = new JTextField();

        CarID_TextField.setPreferredSize(new Dimension(240, 22));
//        CarID_Label.setPreferredSize(new Dimension(175, 22));
        CarIDValidity_Label.setPreferredSize(new Dimension(415, 9));
        Remove_Button.setPreferredSize(new Dimension(100, 22));
        Cancel_Button.setPreferredSize(new Dimension(100, 22));

        CarIDValidity_Label.setForeground(Color.red);

        add(CarID_Label);
        add(CarID_TextField);
        add(CarIDValidity_Label);

        add(Remove_Button);
        add(Cancel_Button);

        Remove_Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String carID = CarID_TextField.getText().trim();
                if (!carID.isEmpty()) {
                    try {
                        if (Integer.parseInt(carID) > 0) {
                            CarIDValidity_Label.setText("");
//                            if (carID != null) {
                            Car car = Car.SearchByID(Integer.parseInt(carID));
                            if (car != null) {
                                int showConfirmDialog = JOptionPane.showConfirmDialog(null, "You are about to remove this car \n "
                                        + car.toString() + "\n Are you sure you want to continue ??", "Confirmation",
                                        JOptionPane.OK_CANCEL_OPTION);
                                if (showConfirmDialog == 0) {
                                    car.Remove();
                                    Parent_JFrame.getMainFrame().getContentPane().removeAll();
                                    Car_Details cd = new Car_Details();
                                    Parent_JFrame.getMainFrame().add(cd.getMainPanel());
                                    Parent_JFrame.getMainFrame().getContentPane().revalidate();
                                    
                                    Parent_JFrame.getMainFrame().setEnabled(true);
                                    dispose();
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Car ID not found !");
                            }
                        } else {
                            carID = null;
                            CarIDValidity_Label.setText("                                                            ID cannot be '0' or negative !");
                        }
                    } catch (NumberFormatException ex) {
                        carID = null;
                        CarIDValidity_Label.setText("                                                            Invalid ID !");
                    }
                } else {
                    carID = null;
                    CarIDValidity_Label.setText("                                                            Enter Car ID !");
                }
                /*ID, Maker, Name, Colour, Type, SeatingCapacity, Model, Condition, RegNo, RentPerHour, IsRented RentDate, carCar, customer*/

            }
        }
        );
        Cancel_Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Parent_JFrame.getMainFrame().setEnabled(true);
                dispose();
            }
        });
    }
}

package GUI;

import BackendCode.Booking;
import BackendCode.Car;
import BackendCode.CarOwner;
import BackendCode.Customer;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import javax.swing.*;
import static javax.swing.JOptionPane.OK_CANCEL_OPTION;

/**
 *
 * @author @AbdullahShahid01
 */
public class Booking_UnBookCar extends JFrame {

    JButton UnBook_Button, Cancel_Button;
    JLabel CarID_Label, CarIDValidity_Label;
    JTextField CarID_TextField;

    private Car car;

    public Booking_UnBookCar() {
        super("UnBook Car");
        setLayout(new FlowLayout());
        setSize(new Dimension(300, 145));
        setResizable(false);
        setLocationRelativeTo(this);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                Parent_JFrame.getMainFrame().setEnabled(true);
                dispose();
            }
        });

        UnBook_Button = new JButton("UnBook");
        Cancel_Button = new JButton("Cancel");

        CarID_Label = new JLabel("Enter Car ID to be UnBooked");
        CarIDValidity_Label = new JLabel();
        CarID_TextField = new JTextField();

        CarID_TextField.setPreferredSize(new Dimension(240, 22));
        CarIDValidity_Label.setPreferredSize(new Dimension(415, 9));

        UnBook_Button.setPreferredSize(new Dimension(100, 22));
        Cancel_Button.setPreferredSize(new Dimension(100, 22));

        CarIDValidity_Label.setForeground(Color.red);

        add(CarID_Label);
        add(CarID_TextField);
        add(CarIDValidity_Label);

        add(UnBook_Button);
        add(Cancel_Button);

        UnBook_Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                String carID = CarID_TextField.getText().trim();
                if (!carID.isEmpty()) {
                    try {
                        if (Integer.parseInt(carID) > 0) {
                            CarIDValidity_Label.setText("");
                            car = Car.SearchByID(Integer.parseInt(carID));
                            if (car != null) {
                                if (car.isRented()) {
                                    CarIDValidity_Label.setText("");
                                } else {
                                    car = null;
                                    JOptionPane.showMessageDialog(null, "This car is not booked !");
                                }
                            } else {
                                car = null;
                                JOptionPane.showMessageDialog(null, "Car ID does not exists !");
                            }
                        } else {
                            carID = null;
                            CarIDValidity_Label.setText("                                                            "
                                    + "ID cannot be '0' or negative !");
                        }
                    } catch (NumberFormatException ex) {
                        carID = null;
                        CarIDValidity_Label.setText("                                                            "
                                + "Invalid ID !");
                    }
                } else {
                    carID = null;
                    CarIDValidity_Label.setText("                                                            "
                            + "Enter Car ID !");
                }

                if (carID != null && car != null) {
                    setEnabled(false);
                    int showConfirmDialog = JOptionPane.showConfirmDialog(null, "You are about to UnBook this Car\n" + car.toString()
                            + "\n Are you sure you want to continue ??", "UnBook Confirmation", OK_CANCEL_OPTION);
                    if (showConfirmDialog == 0) {

                        ArrayList<Booking> booking = Booking.SearchByCarID(Integer.parseInt(carID));
                        Booking last = booking.get((booking.size() - 1));
                        last.setReturnTime(System.currentTimeMillis());
                        last.Update();

                        int bill = last.calculateBill(); 
                        
                        CarOwner carOwner = last.getCar().getCarOwner();
                        carOwner.setBalance((carOwner.getBalance() + bill));
                        carOwner.Update();

                        Customer customer = last.getCustomer();
                        customer.setBill(customer.getBill()+bill);
                        customer.Update();
                        
                        Parent_JFrame.getMainFrame().getContentPane().removeAll();
                        Booking_Details cd = new Booking_Details();
                        Parent_JFrame.getMainFrame().add(cd.getMainPanel());
                        Parent_JFrame.getMainFrame().getContentPane().revalidate();
                        JOptionPane.showMessageDialog(null, "Car Successfully UnBooked !");
                        Parent_JFrame.getMainFrame().setEnabled(true);
                        dispose();
                    } else {
                        setEnabled(true);
                    }
                }
            }
        }
        );
        Cancel_Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Parent_JFrame.getMainFrame().setEnabled(true);
                dispose();
            }
        });
    }

}

package GUI;

import BackendCode.Car;
import BackendCode.CarOwner;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.table.DefaultTableCellRenderer;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

public class CarOwner_Details implements ActionListener {

    private JTextField SearchID_TextField;
    private JButton SearchID_Button, SearchName_Button, Update_Button, Add_Button, Remove_Button, Back_Button, Logout_Button, ClearBalance_Button;
    private JScrollPane jScrollPane1;
    private JTable jTable1;
    private JTextField SearchName_TextField;
    static DefaultTableModel tablemodel;
    private JPanel MainPanel;

    public CarOwner_Details() {
        MainPanel = new JPanel();
        Parent_JFrame.getMainFrame().setTitle("Car Owner Details - Rent-A-Car Management System");
        MainPanel.setLayout(new AbsoluteLayout());
        MainPanel.setMinimumSize(new Dimension(1366, 730));

        SearchID_Button = new JButton("Search ID");
        Update_Button = new JButton("Update");
        Add_Button = new JButton("Add");
        Remove_Button = new JButton("Remove");
        Back_Button = new JButton("Back");
        Logout_Button = new JButton("Logout");
        SearchName_Button = new JButton("Search Name");
        ClearBalance_Button = new JButton("Clear Balance");
        SearchID_TextField = new JTextField();
        SearchName_TextField = new JTextField();
        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();

        String[] columns = {"Sr#", "ID", "CNIC", "Name", "Contact Number", "Car Given for rent", "Balance"};
        tablemodel = new DefaultTableModel(columns, 0) {

            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };

        jTable1 = new JTable(tablemodel);

        jTable1.setSize(new Dimension(1330, 550));
        jScrollPane1 = new JScrollPane(jTable1);
        jTable1.setFillsViewportHeight(true);// makes the size of table equal to that of scroll pane to fill the table in the scrollpane
        ArrayList<CarOwner> CarOwner_objects = CarOwner.View();
        for (int i = 0; i < CarOwner_objects.size(); i++) {

            int ID = CarOwner_objects.get(i).getID();
            String CNIC = CarOwner_objects.get(i).getCNIC();
            String Name = CarOwner_objects.get(i).getName();
            String ContactNo = CarOwner_objects.get(i).getContact_No();
            int Balance = CarOwner_objects.get(i).getBalance();

            // getting all cars for this Owner
            String carGivenOnRent = "";
            ArrayList<Car> cars = Car.View();

            for (int j = 0; j < cars.size(); j++) {
                if (cars.get(j).getCarOwner().getID() == ID) {
                    carGivenOnRent += cars.get(j).getID() + ": " + cars.get(j).getName() + "  ";
                }
            }
            if (carGivenOnRent.isEmpty()) {
                carGivenOnRent = "No Cars given for Rent !";
            }

            String[] one_s_Record = {(i + 1) + "", "" + ID, CNIC, Name, ContactNo, carGivenOnRent, Balance + ""};
            tablemodel.addRow(one_s_Record);
        }

        // center aligning the text in all the columns
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        jTable1.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);

        // adjusting size of each column
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(70);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(150);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(170);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(110);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(180);
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(140);
        jTable1.getColumnModel().getColumn(6).setPreferredWidth(100);
//        jScrollPane1.setViewportView(jTable1);
        MainPanel.add(SearchID_Button, new AbsoluteConstraints(390, 10, 130, 22));
        MainPanel.add(SearchID_TextField, new AbsoluteConstraints(525, 10, 240, 22));
        MainPanel.add(SearchName_Button, new AbsoluteConstraints(10, 10, 130, 22));
        MainPanel.add(SearchName_TextField, new AbsoluteConstraints(145, 10, 240, 22));
        MainPanel.add(jScrollPane1, new AbsoluteConstraints(10, 50, 1330, 550));
        MainPanel.add(Update_Button, new AbsoluteConstraints(579, 625, 130, 22));
        MainPanel.add(Add_Button, new AbsoluteConstraints(420, 625, 130, 22));
        MainPanel.add(Remove_Button, new AbsoluteConstraints(735, 625, 130, 22));
        MainPanel.add(Back_Button, new AbsoluteConstraints(1106, 625, 100, 22));
        MainPanel.add(Logout_Button, new AbsoluteConstraints(1236, 625, 100, 22));
        MainPanel.add(ClearBalance_Button, new AbsoluteConstraints(10, 625, 200, 22));

        SearchID_Button.addActionListener(this);
        SearchName_Button.addActionListener(this);
        Remove_Button.addActionListener(this);
        Add_Button.addActionListener(this);
        Update_Button.addActionListener(this);
        Back_Button.addActionListener(this);
        Logout_Button.addActionListener(this);
        ClearBalance_Button.addActionListener(this);
    }

//    public static void main(String args[]) {
//        new CarOwner_Details().setVisible(true);
//
//    }
    public JPanel getMainPanel() {
        return MainPanel;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        switch (e.getActionCommand()) {
            case "Search ID": {
                String id = SearchID_TextField.getText().trim();
                if (!id.isEmpty()) {
                    if (CarOwner.isIDvalid(id)) {
                        CarOwner co = CarOwner.SearchByID(Integer.parseInt(id));
                        if (co != null) {
                            JOptionPane.showMessageDialog(null, co.toString());
                            SearchID_TextField.setText("");
                        } else {
                            JOptionPane.showMessageDialog(null, "Required person not found");
                            SearchID_TextField.setText("");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid ID !");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please Enter ID first !");
                }
            }
            break;
            case "Search Name": {
                String name = SearchName_TextField.getText().trim();
                if (!name.isEmpty()) {
                    if (CarOwner.isNameValid(name)) {
                        ArrayList<CarOwner> carOwnerArrayList = CarOwner.SearchByName(name);
                        String record = "";

                        if (!carOwnerArrayList.isEmpty()) {
                            for (int i = 0; i < carOwnerArrayList.size(); i++) {
                                record += carOwnerArrayList.get(i).toString() + "\n";
                            }
                            JOptionPane.showMessageDialog(null, record);
                            SearchName_TextField.setText("");
                        } else {
                            JOptionPane.showMessageDialog(null, "Required person not found");
                            SearchName_TextField.setText("");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid Name !");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please Enter Name first !");
                }
            }
            break;
            case "Add": {
                Parent_JFrame.getMainFrame().setEnabled(false);
                CarOwner_Add aco = new CarOwner_Add();
                aco.frame.setVisible(true);
            }
            break;
            case "Remove": {
                Parent_JFrame.getMainFrame().setEnabled(false);
                new CarOwner_Remove().frame.setVisible(true);
            }
            break;

            case "Update": {
                Parent_JFrame.getMainFrame().setEnabled(false);
                new CarOwner_Update().frame.setVisible(true);
            }
            break;

            case "Clear Balance": {
//                Creating an array that contains IDs of all CarOwners
                ArrayList<CarOwner> View = CarOwner.View(); // getting all the available Car Owner Objects
                if (!View.isEmpty()) {
                    ArrayList<String> IDsArray = new ArrayList<>(0);
                    for (int i = 0; i < View.size(); i++) { // getting IDs of all the Car Owners with Balance > 0
                        if (View.get(i).getBalance() != 0) {
                            IDsArray.add(View.get(i).getID() + "");
                        }
                    }

                    Object showInputDialog = JOptionPane.showInputDialog(null, "Select ID for Car Owner whose balance you want to clear.",
                            "Clear Balance", JOptionPane.PLAIN_MESSAGE, null, IDsArray.toArray(), null);
                    System.out.println(showInputDialog);

                    if (showInputDialog != null) {
                        CarOwner carOwner = CarOwner.SearchByID(Integer.parseInt(showInputDialog + ""));

                        int showConfirmDialog = JOptionPane.showConfirmDialog(null, "You are about to clear the balance for the following Car Owner\n"
                                + carOwner + "\nAre you sure you want to continue ?", "Clear Balance Confirmation",
                                JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null);
                        if (showConfirmDialog == 0) {
                            carOwner.setBalance(0);
                            carOwner.Update();
                            Parent_JFrame.getMainFrame().getContentPane().removeAll();
                            CarOwner_Details cd = new CarOwner_Details();
                            Parent_JFrame.getMainFrame().add(cd.getMainPanel());
                            Parent_JFrame.getMainFrame().getContentPane().revalidate();
                            JOptionPane.showMessageDialog(null, "Balance Successfully Cleared !");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No Car Owner is registered !");
                }
            }
            break;
            case "Back": {

                Parent_JFrame.getMainFrame().setTitle("Rent-A-Car Management System [REBORN]");
                MainMenu mm = new MainMenu();
                Parent_JFrame.getMainFrame().getContentPane().removeAll();
                Parent_JFrame.getMainFrame().add(mm.getMainPanel());
                Parent_JFrame.getMainFrame().getContentPane().revalidate();
            }
            break;
            case "Logout": {
                Parent_JFrame.getMainFrame().dispose();
                Runner r = new Runner();
                JFrame frame = Runner.getFrame();
                Login login = new Login();
                JPanel panel = login.getMainPanel();
                frame.add(panel);
                frame.setVisible(true);
            }
            break;
        }
    }
}

package GUI;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

/**
 *
 * @author @AbdullahShahid01
 */
public class Login {

    private final JPanel MiniPanel, MainPanel;
    private final JButton Close_Button, Login_Button;
    private final JLabel PW_Label, UN_Label, Image_jLabel, info_Label;
    private final JTextField UN_TextField;
    private final JPasswordField Password_Field;

    public Login() {

        MiniPanel = new JPanel();
        MainPanel = new JPanel();

        Close_Button = new JButton("Close");
        Login_Button = new JButton("Login");

        PW_Label = new JLabel("Password");
        UN_Label = new JLabel("Username");
        info_Label = new JLabel("Please Enter your Login Details");
        Image_jLabel = new JLabel();

        UN_TextField = new JTextField();
        Password_Field = new JPasswordField();

        MiniPanel.setBackground(Color.BLUE);
        MiniPanel.setForeground(Color.WHITE);
        MiniPanel.setLayout(new FlowLayout());

        MainPanel.setMinimumSize(new Dimension(1366, 730));
        MainPanel.setLayout(new AbsoluteLayout());

        Login_Button.setPreferredSize(new Dimension(80, 20));
        Close_Button.setPreferredSize(new Dimension(80, 20));

        info_Label.setFont(new Font("Consolas", 1, 18)); // Consolas, Bold , 18pt
        info_Label.setForeground(Color.WHITE);

        UN_Label.setFont(new Font("Consolas", 0, 18));
        UN_Label.setForeground(Color.WHITE);
        UN_Label.setPreferredSize(new Dimension(100, 20));

        PW_Label.setFont(new Font("Consolas", 0, 18));
        PW_Label.setForeground(Color.WHITE);
        PW_Label.setPreferredSize(new Dimension(100, 20));

        

        Image_jLabel.setMinimumSize(new Dimension(1366, 730));
        Image_jLabel.setIcon(new ImageIcon("LoginImage.jpg"));

        UN_TextField.setPreferredSize(new Dimension(200, 20));
        Password_Field.setPreferredSize(new Dimension(200, 20));

        MiniPanel.add(info_Label);
        MiniPanel.add(UN_Label);
        MiniPanel.add(UN_TextField);
        MiniPanel.add(PW_Label);
        MiniPanel.add(Password_Field);
        MiniPanel.add(Login_Button);
        MiniPanel.add(Close_Button);

        MainPanel.add(MiniPanel, new AbsoluteConstraints(50, 150, 350, 125));
        MainPanel.add(Image_jLabel, new AbsoluteConstraints(0, 0));

        Login_Button.addActionListener(new LoginActionListener());
        Close_Button.addActionListener(new LoginActionListener());
    }

    /**
     * @return the MainPanel
     */
    public JPanel getMainPanel() {
        return MainPanel;
    }

    private class LoginActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            switch (e.getActionCommand()) {
                case "Close": {
                    int showConfirmDialog = JOptionPane.showConfirmDialog(null, "You are about to terminate the program.\n"
                            + " Are you sure you want to continue ?", "Close Confirmation", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null);
                    if (showConfirmDialog == 0) {
                        System.exit(0);
                    }
                    break;
                }
                case "Login": {
                    if (UN_TextField.getText().trim().equalsIgnoreCase("admin")
                            && String.valueOf(Password_Field.getPassword()).equals("123")) {
                        UN_TextField.setText("");
                        Password_Field.setText("");
                        Runner.getFrame().dispose();
                        Parent_JFrame frame = new Parent_JFrame();
                        MainMenu menu = new MainMenu();
                        JFrame mainFrame = Parent_JFrame.getMainFrame();
//                        JPanel mainPanel = menu.getMainPanel();
                        mainFrame.add(menu.getMainPanel());
                        mainFrame.setVisible(true);
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid UserName/Password", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;
                }
            }
        }
    }

}

package GUI;

import java.awt.Dimension;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

/**
 *
 * @author @AbdullahShahid01
 */
public class Runner {

    private static final JFrame FRAME = new JFrame();
    private final ImageIcon icon;
    private final JLabel L1;

    public static JFrame getFrame() {
        return FRAME;
    }

    public Runner() {
        
        icon = new ImageIcon("WelcomeImage.jpg");
        L1 = new JLabel(icon);
        FRAME.setUndecorated(true);
        FRAME.setSize(new Dimension(1000, 534));
        FRAME.setLocationRelativeTo(null);
        FRAME.add(L1);
    }

    public static void main(String[] args) {
        Runner runner = new Runner();
        Runner.FRAME.setVisible(true);

        try {
            Thread.sleep(1000);
            Login LoginObject = new Login();
            Runner.FRAME.getContentPane().removeAll();
            Runner.FRAME.add(LoginObject.getMainPanel());
            Runner.FRAME.getContentPane().revalidate();

        } catch (InterruptedException e) {
            System.out.println(e);
        }
    }
}

package GUI;

import BackendCode.Booking;
import BackendCode.Customer;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import javax.swing.*;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

public class Customer_Remove {

    JButton Remove_Button, Cancel_Button;
    JLabel ID_Label, IDValidity_Label;
    JTextField ID_TextField;
    JFrame frame = new JFrame();

    public Customer_Remove() {
        frame.setTitle("Remove Customer");
        frame.setLayout(new AbsoluteLayout());
        frame.setSize(new Dimension(450, 290));
        frame.setResizable(false);
        frame.setLocationRelativeTo(Parent_JFrame.getMainFrame());
        frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                Parent_JFrame.getMainFrame().setEnabled(true);
                frame.dispose();
            }
        });

        Remove_Button = new JButton("Remove");
        Cancel_Button = new JButton("Cancel");

        ID_Label = new JLabel("Enter ID (without dashes)");
        IDValidity_Label = new JLabel();
        ID_TextField = new JTextField();

        ID_TextField.setPreferredSize(new Dimension(240, 22));

        ID_Label.setPreferredSize(new Dimension(175, 22));
        IDValidity_Label.setPreferredSize(new Dimension(240, 9));
        IDValidity_Label.setForeground(Color.red);
        frame.add(ID_Label, new AbsoluteConstraints(10, 5));
        frame.add(ID_TextField, new AbsoluteConstraints(195, 5));
//        IDValidity_Label.setText("Invalid ID !");
        frame.add(IDValidity_Label, new AbsoluteConstraints(195, 30));
        frame.add(Remove_Button, new AbsoluteConstraints(100, 225, 100, 22));
        frame.add(Cancel_Button, new AbsoluteConstraints(250, 225, 100, 22));

        Remove_Button.addActionListener(new Customer_Remove_ActionListener());

        Cancel_Button.addActionListener(new Customer_Remove_ActionListener());
    }

    private class Customer_Remove_ActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            switch (e.getActionCommand()) {
                case "Remove": {
                    String id = ID_TextField.getText().trim();
                    if (Customer.isIDvalid(id)) {
                        Customer customer = Customer.SearchByID(Integer.parseInt(id));
                        if (customer != null) {
                            int showConfirmDialog = JOptionPane.showConfirmDialog(frame, "You are about to remove the following Customer.\n"
                                    + customer.toString() + " \nAll the data including Booked Cars and Balance for this Customer will also be deleted  !"
                                    + "\n Are you sure you want to continue ??", "Remove Customer", JOptionPane.OK_CANCEL_OPTION);
                            if (showConfirmDialog == 0) {
                                // Deleting all the booking records of customer
                                ArrayList<Booking> bookings = Booking.View();
                                for (int i = 0; i < bookings.size(); i++) {
                                    if (customer.getID() == bookings.get(i).getCustomer().getID()) {
                                        bookings.get(i).Remove();
                                    }
                                }
                                // ** Delete all cars for this Customer **
                                customer.Remove();

                                System.out.println("Customer deleted !");
                                Parent_JFrame.getMainFrame().getContentPane().removeAll();
                                Customer_Details cd = new Customer_Details();
                                Parent_JFrame.getMainFrame().add(cd.getMainPanel());
                                Parent_JFrame.getMainFrame().getContentPane().revalidate();
                                JOptionPane.showMessageDialog(null, "Record successfully Removed !");
                                Parent_JFrame.getMainFrame().setEnabled(true);
                                frame.dispose();
                            } else {

                                frame.setEnabled(true);
                            }

                        } else {
                            JOptionPane.showMessageDialog(null, "This ID does not exists !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Enter a valid ID !\n(A valid ID is an integer number greater than 0)");
                    }
                    break;
                }
                case "Cancel": {
                    Parent_JFrame.getMainFrame().setEnabled(true);
                    frame.dispose();
                    break;
                }
            }
        }
    }
}

package GUI;

import BackendCode.Booking;
import BackendCode.Car;
import BackendCode.Customer;
import java.awt.*;
import java.awt.event.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.*;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

/**
 *
 * @author @AbdullahShahid01
 */
public class Booking_BookCar extends JFrame {

    JButton Book_Button, Cancel_Button;
    JLabel CarID_Label, CarIDValidity_Label, CustomerID_Label, CustomerIDValidity_Label;
    JTextField CarID_TextField, CustomerID_TextField;

    private Car car;
    private Customer customer;

    public Booking_BookCar() {
        super("Book Car");
        setLayout(new FlowLayout());
        setSize(new Dimension(300, 200));
        setResizable(false);
        setLocationRelativeTo(this);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                Parent_JFrame.getMainFrame().setEnabled(true);
                dispose();
            }
        });

        Book_Button = new JButton("Book");
        Cancel_Button = new JButton("Cancel");

        CarID_Label = new JLabel("Enter Car ID to be Booked");
        CarIDValidity_Label = new JLabel();
        CarID_TextField = new JTextField();

        CustomerID_Label = new JLabel("Enter Customer ID");
        CustomerIDValidity_Label = new JLabel();
        CustomerID_TextField = new JTextField();

        CarID_TextField.setPreferredSize(new Dimension(240, 22));
        CarIDValidity_Label.setPreferredSize(new Dimension(415, 9));

        CustomerID_TextField.setPreferredSize(new Dimension(240, 22));
        CustomerIDValidity_Label.setPreferredSize(new Dimension(415, 9));

        Book_Button.setPreferredSize(new Dimension(100, 22));
        Cancel_Button.setPreferredSize(new Dimension(100, 22));

        CarIDValidity_Label.setForeground(Color.red);
        CustomerIDValidity_Label.setForeground(Color.red);

        add(CarID_Label);
        add(CarID_TextField);
        add(CarIDValidity_Label);

        add(CustomerID_Label);
        add(CustomerID_TextField);
        add(CustomerIDValidity_Label);

        add(Book_Button);
        add(Cancel_Button);

        Book_Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                String CarID = CarID_TextField.getText().trim();
                if (!CarID.isEmpty()) {
                    try {
                        if (Integer.parseInt(CarID) > 0) {
                            CarIDValidity_Label.setText("");
                            car = Car.SearchByID(Integer.parseInt(CarID));
                            if (car != null) {
                                if (!car.isRented()) {
                                    CarIDValidity_Label.setText("");
                                } else {
                                    car = null;
                                    JOptionPane.showMessageDialog(null, "This car is already booked !");
                                }
                            } else {
                                CarID = null;
                                CarIDValidity_Label.setText("                                                            Car ID does not exists !");
                            }
                        } else {
                            CarID = null;
                            CarIDValidity_Label.setText("                                                            ID cannot be '0' or negative !");
                        }
                    } catch (NumberFormatException ex) {
                        CarID = null;
                        CarIDValidity_Label.setText("                                                            Invalid ID !");
                    }
                } else {
                    CarID = null;
                    CarIDValidity_Label.setText("                                                            Enter Car ID !");
                }

                String customerID = CustomerID_TextField.getText().trim();
                if (!customerID.isEmpty()) {
                    try {
                        if (Integer.parseInt(customerID) > 0) {
                            CustomerIDValidity_Label.setText("");
                            customer = Customer.SearchByID(Integer.parseInt(customerID));
                            if (customer != null) {
                                CustomerIDValidity_Label.setText("");
                            } else {
                                customerID = null;
                                JOptionPane.showMessageDialog(null, "Customer ID does not exists !");
                            }
                        } else {
                            customerID = null;
                            CustomerIDValidity_Label.setText("                                                            ID cannot be '0' or negative !");
                        }
                    } catch (NumberFormatException ex) {
                        customerID = null;
                        CustomerIDValidity_Label.setText("                                                            Invalid ID !");
                    }
                } else {
                    customerID = null;
                    CustomerIDValidity_Label.setText("                                                            Enter Customer ID !");
                }

                if (CarID != null & customerID != null) {
                    setEnabled(false);
                    int showConfirmDialog = JOptionPane.showConfirmDialog(null,
                            "You are about to Book the Car: \n" + car.toString() + "\n against the Customer: \n"
                            + customer.toString() + "\n Are you sure you want to continue??",
                            "Book Confirmation", JOptionPane.OK_CANCEL_OPTION);
                    if (showConfirmDialog == 0) {
                        Booking booking = new Booking(0, customer, car, System.currentTimeMillis(), 0);
                        booking.Add();
                        Parent_JFrame.getMainFrame().getContentPane().removeAll();
                        Booking_Details cd = new Booking_Details();
                        Parent_JFrame.getMainFrame().add(cd.getMainPanel());
                        Parent_JFrame.getMainFrame().getContentPane().revalidate();
                        JOptionPane.showMessageDialog(null, "Car Successfully Booked !");
                        Parent_JFrame.getMainFrame().setEnabled(true);
                        dispose();
                    }
                }
            }
        }
        );
        Cancel_Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Parent_JFrame.getMainFrame().setEnabled(true);
                dispose();
            }
        });
    }
}

package GUI;

import BackendCode.CarOwner;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

public class CarOwner_Add {

    JButton Add_Button, Cancel_Button;
    JLabel CNIC_Label, Name_Label, Contact_Label, Email_Label, UserName_Label, Password_Label, CNICValidity_Label, contactValidity_Label, NameValidity_Label, EmailValidity_Label, UserNameValidity_Label, PasswordValidity_Label;
    JTextField CNIC_TextField, Name_TextField, Contact_TextField, Email_TextField, UserName_TextField, Password_TextField;
    JFrame frame = new JFrame();

    public CarOwner_Add() {
        frame.setTitle("Add CarOwner");
        frame.setLayout(new AbsoluteLayout());
        frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        frame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                Parent_JFrame.getMainFrame().setEnabled(true);
                frame.dispose();
            }
        });

        frame.setSize(new Dimension(450, 290));
        frame.setResizable(false);
        frame.setLocationRelativeTo(Parent_JFrame.getMainFrame());

        Add_Button = new JButton("Add");
        Cancel_Button = new JButton("Cancel");

        CNIC_Label = new JLabel("Enter CNIC (without dashes)");
        Name_Label = new JLabel("Enter Name");
        Contact_Label = new JLabel("Enter Contact");
        Email_Label = new JLabel("Enter Email");
        UserName_Label = new JLabel("Enter Username");
        Password_Label = new JLabel("Enter Password");
        CNICValidity_Label = new JLabel();
        NameValidity_Label = new JLabel();
        EmailValidity_Label = new JLabel();
        UserNameValidity_Label = new JLabel();
        PasswordValidity_Label = new JLabel();
        contactValidity_Label = new JLabel();
        CNIC_TextField = new JTextField();
        Name_TextField = new JTextField();
        Contact_TextField = new JTextField();
        Email_TextField = new JTextField();
        UserName_TextField = new JTextField();
        Password_TextField = new JTextField();

        CNIC_TextField.setPreferredSize(new Dimension(240, 22));
        Name_TextField.setPreferredSize(new Dimension(240, 22));
        Contact_TextField.setPreferredSize(new Dimension(240, 22));
        Email_TextField.setPreferredSize(new Dimension(240, 22));
        UserName_TextField.setPreferredSize(new Dimension(240, 22));
        Password_TextField.setPreferredSize(new Dimension(240, 22));

        CNIC_Label.setPreferredSize(new Dimension(175, 22));
        Name_Label.setPreferredSize(new Dimension(175, 22));
        Contact_Label.setPreferredSize(new Dimension(175, 22));
        Email_Label.setPreferredSize(new Dimension(175, 22));
        UserName_Label.setPreferredSize(new Dimension(175, 22));
        Password_Label.setPreferredSize(new Dimension(175, 22));
        CNICValidity_Label.setPreferredSize(new Dimension(240, 9));
        contactValidity_Label.setPreferredSize(new Dimension(240, 9));
        NameValidity_Label.setPreferredSize(new Dimension(240, 9));
        EmailValidity_Label.setPreferredSize(new Dimension(240, 9));
        UserNameValidity_Label.setPreferredSize(new Dimension(240, 9));
        PasswordValidity_Label.setPreferredSize(new Dimension(240, 9));

        CNICValidity_Label.setForeground(Color.red);
        contactValidity_Label.setForeground(Color.red);
        NameValidity_Label.setForeground(Color.red);
        EmailValidity_Label.setForeground(Color.red);
        UserNameValidity_Label.setForeground(Color.red);
        PasswordValidity_Label.setForeground(Color.red);

        frame.add(CNIC_Label, new AbsoluteConstraints(10, 5));
        frame.add(CNIC_TextField, new AbsoluteConstraints(195, 5));
        frame.add(CNICValidity_Label, new AbsoluteConstraints(195, 30));

        frame.add(Name_Label, new AbsoluteConstraints(10, 42));
        frame.add(Name_TextField, new AbsoluteConstraints(195, 42));
        frame.add(NameValidity_Label, new AbsoluteConstraints(195, 66));

        frame.add(Contact_Label, new AbsoluteConstraints(10, 77));
        frame.add(Contact_TextField, new AbsoluteConstraints(195, 77));
        frame.add(contactValidity_Label, new AbsoluteConstraints(195, 102));

        frame.add(Add_Button, new AbsoluteConstraints(100, 225, 100, 22));
        frame.add(Cancel_Button, new AbsoluteConstraints(250, 225, 100, 22));

        Add_Button.addActionListener(new CarOwner_Add_ActionListener());

        Cancel_Button.addActionListener(new CarOwner_Add_ActionListener());
    }

    private class CarOwner_Add_ActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            switch (e.getActionCommand()) {
                case "Add": {
                    String cnic = CNIC_TextField.getText().trim();
                    String name = Name_TextField.getText().trim();
                    String contact = Contact_TextField.getText().trim();

                    if (CarOwner.isCNICValid(cnic)) {
                        CarOwner carOwner = CarOwner.SearchByCNIC(cnic);
                        if (carOwner == null) {
                            if (CarOwner.isNameValid(name)) {
                                if (CarOwner.isContactNoValid(contact)) {
                                    new CarOwner(0, 0, cnic, name, contact).Add(); // ID is Auto
                                    Parent_JFrame.getMainFrame().getContentPane().removeAll();
                                    CarOwner_Details cd = new CarOwner_Details();
                                    Parent_JFrame.getMainFrame().add(cd.getMainPanel());
                                    Parent_JFrame.getMainFrame().getContentPane().revalidate();
                                    Parent_JFrame.getMainFrame().setEnabled(true);
                                    JOptionPane.showMessageDialog(null, "Car Owner added successfully !");
                                    frame.dispose();
                                } else {
                                    JOptionPane.showMessageDialog(null, "Invalid contact no. !");
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Invalid Name !");
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "This CNIC is already registered !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid CNIC");
                    }
                    break;
                }
                case "Cancel": {
                    Parent_JFrame.getMainFrame().setEnabled(true);
                    frame.dispose();
                    break;
                }
            }
        }

    }
}

package GUI;

import BackendCode.Booking;
import BackendCode.Car;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;

/**
 *
 * @author @AbdullahShahid01
 */
public class Parent_JFrame {

    private static JFrame MainFrame;
    private final JMenuBar menu_Bar;
    private final JMenu File, CarMenu, CustomerMenu, CarOwnerMenu, HelpMenu;
    private final JMenuItem Exit, addCar, updateCar, removeCar, ViewUnbookedCars, ViewbookedCars,
            addCustomer, updateCustomer, removeCustomer,
            addCarOwner, updateCarOwner, removeCarOwner,
            ViewJavaDoc, ViewDocumentation, About;

    public Parent_JFrame() {
        MainFrame = new JFrame("Rent-A-Car Management System");
        MainFrame.setSize(1366, 730);
        MainFrame.setVisible(true);

                
        MainFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        MainFrame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                int showConfirmDialog = JOptionPane.showConfirmDialog(null, "You are about to terminate the program.\n"
                        + " Are you sure you want to continue ?", "Close Confirmation", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null);
                if (showConfirmDialog == 0) {
                    System.exit(0);
                }
            }
        });

        menu_Bar = new JMenuBar();

        File = new JMenu("File");
        CarMenu = new JMenu("Cars");
        CustomerMenu = new JMenu("Customer");
        CarOwnerMenu = new JMenu("Car Owner");
        HelpMenu = new JMenu("Help");

        Exit = new JMenuItem("Exit");
        addCar = new JMenuItem("Add Car");
        updateCar = new JMenuItem("Update Car");
        removeCar = new JMenuItem("Remove Car");
        ViewbookedCars = new JMenuItem("View booked Cars");
        ViewUnbookedCars = new JMenuItem("View Unbooked Cars");

        addCustomer = new JMenuItem("Add Customer");
        updateCustomer = new JMenuItem("Update Customer");
        removeCustomer = new JMenuItem("Remove  Customer");

        addCarOwner = new JMenuItem("Add Car Owner");
        updateCarOwner = new JMenuItem("Update Car Owner");
        removeCarOwner = new JMenuItem("Remove Car Owner");

        ViewJavaDoc = new JMenuItem("View JavaDoc");
        ViewDocumentation = new JMenuItem("View Documentation");
        About = new JMenuItem("About");

        File.add(Exit);
        CarMenu.add(addCar);
        CarMenu.add(updateCar);
        CarMenu.add(removeCar);
        CarMenu.add(ViewbookedCars);
        CarMenu.add(ViewUnbookedCars);

        CustomerMenu.add(addCustomer);
        CustomerMenu.add(updateCustomer);
        CustomerMenu.add(removeCustomer);

        CarOwnerMenu.add(addCarOwner);
        CarOwnerMenu.add(updateCarOwner);
        CarOwnerMenu.add(removeCarOwner);

        HelpMenu.add(ViewJavaDoc);
        HelpMenu.add(ViewDocumentation);
        HelpMenu.add(About);

        menu_Bar.add(File);
        menu_Bar.add(CarMenu);
        menu_Bar.add(CustomerMenu);
        menu_Bar.add(CarOwnerMenu);
        menu_Bar.add(HelpMenu);

        MainFrame.setJMenuBar(menu_Bar);

        Exit.addActionListener(new Parent_JFrame_ActionListner());
        addCar.addActionListener(new Parent_JFrame_ActionListner());
        updateCar.addActionListener(new Parent_JFrame_ActionListner());
        removeCar.addActionListener(new Parent_JFrame_ActionListner());
        ViewbookedCars.addActionListener(new Parent_JFrame_ActionListner());
        ViewUnbookedCars.addActionListener(new Parent_JFrame_ActionListner());

        addCustomer.addActionListener(new Parent_JFrame_ActionListner());
        updateCustomer.addActionListener(new Parent_JFrame_ActionListner());
        removeCustomer.addActionListener(new Parent_JFrame_ActionListner());

        addCarOwner.addActionListener(new Parent_JFrame_ActionListner());
        updateCarOwner.addActionListener(new Parent_JFrame_ActionListner());
        removeCarOwner.addActionListener(new Parent_JFrame_ActionListner());

        ViewJavaDoc.addActionListener(new Parent_JFrame_ActionListner());
        ViewDocumentation.addActionListener(new Parent_JFrame_ActionListner());
        About.addActionListener(new Parent_JFrame_ActionListner());

    }

    public static JFrame getMainFrame() {
        return MainFrame;
    }

    private class Parent_JFrame_ActionListner implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            switch (e.getActionCommand()) {
                case "Exit": {
                    int showConfirmDialog = JOptionPane.showConfirmDialog(null, "You are about to terminate the program.\n"
                            + " Are you sure you want to continue ?", "Close Confirmation", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null);
                    if (showConfirmDialog == 0) {
                        System.exit(0);
                    }
                }
                break;
                case "Add Car": {
                    Parent_JFrame.getMainFrame().setEnabled(false);
                    Car_Add ac = new Car_Add();
                    ac.setVisible(true);
                }
                break;
                case "Update Car": {
                    Parent_JFrame.getMainFrame().setEnabled(false);
                    Car_Update ac = new Car_Update();
                    ac.setVisible(true);
                }
                break;
                case "Remove Car": {
                    Parent_JFrame.getMainFrame().setEnabled(false);
                    Car_Remove ac = new Car_Remove();
                    ac.setVisible(true);
                }
                break;
                case "View booked Cars": {
                    ArrayList<Car> SearchBookedCars_Array = Booking.getBookedCars();
                    String result = "";
                    if (!SearchBookedCars_Array.isEmpty()) {
                        for (int i = 0; i < SearchBookedCars_Array.size(); i++) {
                            result += (i + 1) + " : " + SearchBookedCars_Array.get(i) + "\n";
                        }
                    } else {
                        result = "No Cars are Booked !";
                    }
                    JOptionPane.showMessageDialog(null, result);
                }
                break;
                case "View Unbooked Cars": {
                    ArrayList<Car> SearchUnBookedCars_Array = Booking.getUnbookedCars();
                    String result = "";
                    if (!SearchUnBookedCars_Array.isEmpty()) {
                        for (int i = 0; i < SearchUnBookedCars_Array.size(); i++) {
                            result += (i + 1) + " : " + SearchUnBookedCars_Array.get(i) + "\n";
                        }
                    } else {
                        result = "No UnBooked Cars are available !";
                    }
                    JOptionPane.showMessageDialog(null, result);
                }
                break;
                case "Add Customer": {
                    Parent_JFrame.getMainFrame().setEnabled(false);
                    Customer_Add aco = new Customer_Add();
                    aco.frame.setVisible(true);
                }
                break;
                case "Update Customer": {
                    Parent_JFrame.getMainFrame().setEnabled(false);
                    new Customer_Update().frame.setVisible(true);
                }
                break;
                case "Remove  Customer": {
                    Parent_JFrame.getMainFrame().setEnabled(false);
                    new Customer_Remove().frame.setVisible(true);
                }
                break;
                case "Add Car Owner": {
                    Parent_JFrame.getMainFrame().setEnabled(false);
                    CarOwner_Add aco = new CarOwner_Add();
                    aco.frame.setVisible(true);
                }
                break;
                case "Update Car Owner": {
                    Parent_JFrame.getMainFrame().setEnabled(false);
                    new CarOwner_Update().frame.setVisible(true);
                }
                break;
                case "Remove Car Owner": {
                    Parent_JFrame.getMainFrame().setEnabled(false);
                    new CarOwner_Remove().frame.setVisible(true);
                }
                break;
                case "View JavaDoc": {
                    if (Desktop.isDesktopSupported()) {
                        try {
                            File myFile = new File("JavaDoc_Documentation_About.pdf");
                            if (myFile.exists()) {
                                Desktop.getDesktop().open(myFile);
                            } else {
                                JOptionPane.showMessageDialog(null, "JavaDoc not found !");
                            }
                        } catch (IOException ex) {

                        }
                    }
                }
                break;
                case "View Documentation": {
                    if (Desktop.isDesktopSupported()) {
                        try {
                            File myFile = new File("JavaDoc_Documentation_About.pdf");
                            if (myFile.exists()) {
                                Desktop.getDesktop().open(myFile);
                            } else {
                                JOptionPane.showMessageDialog(null, "JavaDoc not found !");
                            }
                        } catch (IOException ex) {

                        }
                    }
                }
                break;
                case "About": {
                    JOptionPane.showMessageDialog(null, "THIS PROGRAM IS WRITTEN AS A SEMESTER PROJECT OF OBJECT ORIENTED PROGRAMMING PROGRAMMIG  BY ABDULLAH SHAHID !");
                }
                break;

            }
        }
    }
}

package GUI;

import BackendCode.Booking;
import BackendCode.Customer;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.table.DefaultTableCellRenderer;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

public class Customer_Details implements ActionListener {

    private JTextField SearchID_TextField;
    private JButton SearchID_Button, SearchName_Button, Update_Button, Add_Button, Remove_Button, Back_Button, Logout_Button, ClearBill_Button;
    private JScrollPane jScrollPane1;
    private JTable jTable1;
    private JTextField SearchName_TextField;
    static DefaultTableModel tablemodel;
    private JPanel MainPanel;

    public Customer_Details() {
        MainPanel = new JPanel();
        Parent_JFrame.getMainFrame().setTitle("Customer Details - Rent-A-Car Management System");
        MainPanel.setLayout(new AbsoluteLayout());
        MainPanel.setMinimumSize(new Dimension(1366, 730));

        SearchID_Button = new JButton("Search ID");
        Update_Button = new JButton("Update");
        Add_Button = new JButton("Add");
        Remove_Button = new JButton("Remove");
        Back_Button = new JButton("Back");
        Logout_Button = new JButton("Logout");
        SearchName_Button = new JButton("Search Name");
        ClearBill_Button = new JButton("Clear Bill");
        SearchID_TextField = new JTextField();
        SearchName_TextField = new JTextField();
        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();

        String[] columns = {"Sr#", "ID", "CNIC", "Name", "Contact Number", "Car Rented", "Bill"};
        tablemodel = new DefaultTableModel(columns, 0) {

            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };

        jTable1 = new JTable(tablemodel);

        jTable1.setSize(new Dimension(1330, 550));
        jScrollPane1 = new JScrollPane();
        jScrollPane1.setViewportView(jTable1);
        jTable1.setFillsViewportHeight(true);// makes the size of table equal to that of scroll pane to fill the table in the scrollpane
        ArrayList<Customer> Customer_objects = Customer.View();
        for (int i = 0; i < Customer_objects.size(); i++) {

            int ID = Customer_objects.get(i).getID();
            String CNIC = Customer_objects.get(i).getCNIC();
            String Name = Customer_objects.get(i).getName();
            String ContactNo = Customer_objects.get(i).getContact_No();
            int Bill = Customer_objects.get(i).getBill();

            // getting booked cars for customer
            ArrayList<Booking> bookings = Booking.SearchByCustomerID(ID);
            String bookedCars = "";
            if (!bookings.isEmpty()) {
                for (int j = 0; j < bookings.size(); j++) {
                    if (bookings.get(j).getReturnTime() == 0) {
                        bookedCars += bookings.get(j).getCar().getID() + ": " + bookings.get(j).getCar().getID() + "\n";
                    } else {
                        bookedCars = "No Cars Booked !";
                    }
                }
            } else {
                bookedCars = "No Cars Booked !";
            }
            String[] one_s_Record = {(i + 1) + "", "" + ID, CNIC, Name, ContactNo, bookedCars, Bill + ""};
            tablemodel.addRow(one_s_Record);
        }

        // center aligning the text in all the columns
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        jTable1.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
//        jTable1.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
//        jTable1.getColumnModel().getColumn(8).setCellRenderer(centerRenderer);
//        jTable1.getColumnModel().getColumn(9).setCellRenderer(centerRenderer);

        // adjusting size of each column
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(70);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(150);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(170);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(110);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(180);
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(140);
        jTable1.getColumnModel().getColumn(6).setPreferredWidth(100);
//        jTable1.getColumnModel().getColumn(7).setPreferredWidth(130);
//        jTable1.getColumnModel().getColumn(8).setPreferredWidth(110);
//        jTable1.getColumnModel().getColumn(9).setPreferredWidth(110);

//        jScrollPane1.setViewportView(jTable1);
        MainPanel.add(SearchID_Button, new AbsoluteConstraints(390, 10, 130, 22));
        MainPanel.add(SearchID_TextField, new AbsoluteConstraints(525, 10, 240, 22));
        MainPanel.add(SearchName_Button, new AbsoluteConstraints(10, 10, 130, 22));
        MainPanel.add(SearchName_TextField, new AbsoluteConstraints(145, 10, 240, 22));
        MainPanel.add(jScrollPane1, new AbsoluteConstraints(10, 50, 1330, 550));
        MainPanel.add(Update_Button, new AbsoluteConstraints(579, 625, 130, 22));
        MainPanel.add(Add_Button, new AbsoluteConstraints(420, 625, 130, 22));
        MainPanel.add(Remove_Button, new AbsoluteConstraints(735, 625, 130, 22));
        MainPanel.add(Back_Button, new AbsoluteConstraints(1106, 625, 100, 22));
        MainPanel.add(Logout_Button, new AbsoluteConstraints(1236, 625, 100, 22));
        MainPanel.add(ClearBill_Button, new AbsoluteConstraints(10, 625, 200, 22));

        SearchID_Button.addActionListener(this);
        SearchName_Button.addActionListener(this);
        Remove_Button.addActionListener(this);
        Add_Button.addActionListener(this);
        Update_Button.addActionListener(this);
        Back_Button.addActionListener(this);
        Logout_Button.addActionListener(this);
        ClearBill_Button.addActionListener(this);
    }

//    public static void main(String args[]) {
//        new Customer_Details().setVisible(true);
//
//    }
    public JPanel getMainPanel() {
        return MainPanel;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        switch (e.getActionCommand()) {
            case "Search ID": {
                String id = SearchID_TextField.getText().trim();
                if (!id.isEmpty()) {
                    if (Customer.isIDvalid(id)) {
                        Customer co = Customer.SearchByID(Integer.parseInt(id));
                        if (co != null) {
                            JOptionPane.showMessageDialog(null, co.toString());
                            SearchID_TextField.setText("");
                        } else {
                            JOptionPane.showMessageDialog(null, "Required person not found");
                            SearchID_TextField.setText("");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid ID !");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please Enter ID first !");
                }
            }
            break;
            case "Search Name": {
                String name = SearchName_TextField.getText().trim();
                if (!name.isEmpty()) {
                    if (Customer.isNameValid(name)) {
                        ArrayList<Customer> customerArrayList = Customer.SearchByName(name);
                        String record = "";
                        for (int i = 0; i < customerArrayList.size(); i++) {
                            record += customerArrayList.get(i).toString() + "\n";
                        }
                        if (!customerArrayList.isEmpty()) {
                            JOptionPane.showMessageDialog(null, record);
                            SearchName_TextField.setText("");
                        } else {
                            JOptionPane.showMessageDialog(null, "Required person not found");
                            SearchName_TextField.setText("");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid Name !");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please Enter Name first !");
                }
            }
            break;
            case "Add": {
                Parent_JFrame.getMainFrame().setEnabled(false);
                Customer_Add aco = new Customer_Add();
                aco.frame.setVisible(true);
            }
            break;
            case "Remove": {
                Parent_JFrame.getMainFrame().setEnabled(false);
                new Customer_Remove().frame.setVisible(true);
            }
            break;
            case "Update": {
                Parent_JFrame.getMainFrame().setEnabled(false);
                new Customer_Update().frame.setVisible(true);
            }
            break;
            case "Back": {
                Parent_JFrame.getMainFrame().setTitle("Rent-A-Car Management System [REBORN]");
                MainMenu mm = new MainMenu();
                Parent_JFrame.getMainFrame().getContentPane().removeAll();
                Parent_JFrame.getMainFrame().add(mm.getMainPanel());
                Parent_JFrame.getMainFrame().getContentPane().revalidate();
            }
            break;
            case "Logout": {
                Parent_JFrame.getMainFrame().dispose();
                Runner r = new Runner();
                JFrame frame = Runner.getFrame();
                Login login = new Login();
                JPanel panel = login.getMainPanel();
                frame.add(panel);
                frame.setVisible(true);
            }
            break;
            case "Clear Bill": {
                ArrayList<Customer> View = Customer.View();//Creating an arrayList that contains Objects of all Customers
                if (!View.isEmpty()) {
                    ArrayList<String> IDsArray = new ArrayList<>(0);
                    for (int i = 0; i < View.size(); i++) { // getting IDs of all the Customers with Bill > 0
                        if (View.get(i).getBill() != 0) {
                            IDsArray.add(View.get(i).getID() + "");
                        }
                    }
                    Object showInputDialog = JOptionPane.showInputDialog(null, "Select ID for Customer whose bill you want to clear.", "Clear Bill",
                            JOptionPane.PLAIN_MESSAGE, null, IDsArray.toArray(), null);
                    System.out.println(showInputDialog);

                    if (showInputDialog != null) {
                        Customer customer = Customer.SearchByID((Integer.parseInt(showInputDialog + "")));

                        int showConfirmDialog = JOptionPane.showConfirmDialog(null, "You are about to clear the balance for the following Customer\n"
                                + customer + "\nAre you sure you want to continue ?", "Clear Bill Confirmation",
                                JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null);
                        if (showConfirmDialog == 0) {
                            customer.setBill(0);
                            customer.Update();
                            Parent_JFrame.getMainFrame().getContentPane().removeAll();
                            Customer_Details cd = new Customer_Details();
                            Parent_JFrame.getMainFrame().add(cd.getMainPanel());
                            Parent_JFrame.getMainFrame().getContentPane().revalidate();
                            JOptionPane.showMessageDialog(null, "Bill Successfully Cleared !");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No Customer Currently Registered !");
                }
            }
            break;
        }
    }
}

package GUI;

import BackendCode.Booking;
import BackendCode.Car;
import BackendCode.CarOwner;
import java.awt.Dimension;
import javax.swing.table.DefaultTableModel;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;

public class Car_Details {

    private static DefaultTableModel tablemodel; // it is made static so that it can be accessed in add GUI class to update the Jtable when a new record is added

    private static JButton SearchName_Button, SearchRegNo_Button, Add_Button,
            Update_Button, Remove_Button, BackButton, LogoutButton;
    private static JTextField SearchName_TextField, SearchRegNo_TextField;
    private static JScrollPane jScrollPane1;
    private static JTable jTable1;
    private JPanel MainPanel;

    /**
     * @return the tablemodel
     */
    public static DefaultTableModel getTablemodel() {
        return tablemodel;
    }

    public JPanel getMainPanel() {
        return MainPanel;
    }

    public Car_Details() {
        MainPanel = new JPanel();
        Parent_JFrame.getMainFrame().setTitle("Car Details - Rent-A-Car Management System");
        MainPanel.setLayout(new AbsoluteLayout());
        MainPanel.setMinimumSize(new Dimension(1366, 730));

        SearchRegNo_Button = new JButton("Search Reg_No");
        SearchRegNo_TextField = new JTextField();

        SearchName_Button = new JButton("Search Name");
        SearchName_TextField = new JTextField();

        Add_Button = new JButton("Add");
        Update_Button = new JButton("Update");
        Remove_Button = new JButton("Remove");
        BackButton = new JButton("Back");
        LogoutButton = new JButton("Logout");
        

        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();
//ID,  Maker,  Name,  Colour,  Type,  SeatingCapacity,  Model,  Condition,  RegNo, RentPerHour,  IsRented RentDate, carOwner customer

        String[] columns = {"Sr#", "ID", "Maker", "Name", "Colour", "Type", "Seats", "Model", "Condition",
            "Reg No.", "Rent/hour", "Car Owner"};
        tablemodel = new DefaultTableModel(columns, 0) {

            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };

        jTable1 = new JTable(getTablemodel());
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//        jTable1.setPreferredScrollableViewportSize(new Dimension(2000, 550));
        jScrollPane1 = new JScrollPane();
        jScrollPane1.setViewportView(jTable1);
        jTable1.setFillsViewportHeight(true);// makes the size of table equal to that of scroll pane to fill the table in the scrollpane
        ArrayList<Car> Car_objects = Car.View();
        for (int i = 0; i < Car_objects.size(); i++) {
//ID,  Maker,  Name,  Colour,  Type,  SeatingCapacity,  Model,  Condition,  RegNo, 
//RentPerHour,  IsRented RentDate, carOwner customer
            int ID = Car_objects.get(i).getID();
            String maker = Car_objects.get(i).getMaker();
            String Name = Car_objects.get(i).getName();
            String color = Car_objects.get(i).getColour();
            String type = Car_objects.get(i).getType();
            int seatingCapacity = Car_objects.get(i).getSeatingCapacity();
            String model = Car_objects.get(i).getModel();
            String condition = Car_objects.get(i).getCondition();
            String regNo = Car_objects.get(i).getRegNo();
            int rentPerHour = Car_objects.get(i).getRentPerHour();
            CarOwner carOwner = Car_objects.get(i).getCarOwner();

            String customerID = "";
            String customerName = "";
            String[] one_s_Record = {((i + 1) + ""), "" + ID, maker, Name, color, type, seatingCapacity+"",
                model, condition, regNo, rentPerHour + "", carOwner.getID() + ": " + carOwner.getName(), customerID + ": " + customerName};
            tablemodel.addRow(one_s_Record);
        }

        // center aligning the text in all the columns
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        jTable1.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(8).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(9).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(10).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(11).setCellRenderer(centerRenderer);
        

        // adjusting size of each column
        jTable1.getColumnModel().getColumn(0).setMinWidth(20);
        jTable1.getColumnModel().getColumn(1).setMinWidth(20);
        jTable1.getColumnModel().getColumn(2).setMinWidth(170);
        jTable1.getColumnModel().getColumn(3).setMinWidth(170);
        jTable1.getColumnModel().getColumn(4).setMinWidth(140);
        jTable1.getColumnModel().getColumn(5).setMinWidth(150);
        jTable1.getColumnModel().getColumn(6).setMinWidth(90);
        jTable1.getColumnModel().getColumn(7).setMinWidth(90);
        jTable1.getColumnModel().getColumn(8).setMinWidth(160);
        jTable1.getColumnModel().getColumn(9).setMinWidth(170);
        jTable1.getColumnModel().getColumn(10).setMinWidth(150);
        jTable1.getColumnModel().getColumn(11).setMinWidth(150);
       

        jTable1.getTableHeader().setReorderingAllowed(false);

        MainPanel.add(SearchRegNo_Button, new AbsoluteConstraints(10, 15, 130, 22));
        MainPanel.add(SearchRegNo_TextField, new AbsoluteConstraints(145, 15, 240, 22));
        MainPanel.add(SearchName_Button, new AbsoluteConstraints(390, 15, 130, 22));
        MainPanel.add(SearchName_TextField, new AbsoluteConstraints(525, 15, 240, 22));
        MainPanel.add(jScrollPane1, new AbsoluteConstraints(10, 60, 1330, 550));
        MainPanel.add(Remove_Button, new AbsoluteConstraints(785, 625, 130, 22));
        MainPanel.add(Add_Button, new AbsoluteConstraints(450, 625, 130, 22));
        MainPanel.add(Update_Button, new AbsoluteConstraints(620, 625, 130, 22));
        MainPanel.add(BackButton, new AbsoluteConstraints(1106, 625, 100, 22));
        MainPanel.add(LogoutButton, new AbsoluteConstraints(1236, 625, 100, 22));
        
        SearchName_Button.addActionListener(new Car_Details_ActionListener());
        SearchRegNo_Button.addActionListener(new Car_Details_ActionListener());
        Add_Button.addActionListener(new Car_Details_ActionListener());
        Update_Button.addActionListener(new Car_Details_ActionListener());
        Remove_Button.addActionListener(new Car_Details_ActionListener());
        BackButton.addActionListener(new Car_Details_ActionListener());
        LogoutButton.addActionListener(new Car_Details_ActionListener());
        
    }

    private class Car_Details_ActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {

            switch (e.getActionCommand()) {

                case "Search Reg_No": {
                    String regNo = SearchRegNo_TextField.getText().trim();
                    if (!regNo.isEmpty()) {
                        if (Car.isRegNoValid(regNo)) {
                            Car car = Car.SearchByRegNo(regNo);
                            if (car != null) {
                                JOptionPane.showMessageDialog(null, car.toString());
                                SearchRegNo_TextField.setText("");
                            } else {
                                JOptionPane.showMessageDialog(null, "Required Car not found");
                                SearchRegNo_TextField.setText("");
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Invalid Reg No.");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Please Enter Car Reg no first !");
                    }
                }
                break;
                case "Search Name": {
                    String name = SearchName_TextField.getText().trim();
                    if (!name.isEmpty()) {
                        if (Car.isNameValid(name)) {

                            ArrayList<Car> car = Car.SearchByName(name);

                            if (!car.isEmpty()) {
                                JOptionPane.showMessageDialog(null, car.toString());
                                SearchName_TextField.setText("");
                            } else {
                                JOptionPane.showMessageDialog(null, "Required Car not found");
                                SearchName_TextField.setText("");
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Invalid Name !");
                            SearchName_TextField.setText("");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Please Enter Car Name first !");
                    }

                }
                break;
                case "Add": {
                    Parent_JFrame.getMainFrame().setEnabled(false);
                    Car_Add ac = new Car_Add();
                    ac.setVisible(true);
                }
                break;
                case "Update": {
                    Parent_JFrame.getMainFrame().setEnabled(false);
                    Car_Update ac = new Car_Update();
                    ac.setVisible(true);
                }
                break;
                case "Remove": {
                    Parent_JFrame.getMainFrame().setEnabled(false);
                    Car_Remove ac = new Car_Remove();
                    ac.setVisible(true);
                }
                break;
                case "Back": {
                    Parent_JFrame.getMainFrame().setTitle("Rent-A-Car Management System [REBORN]");
                    MainMenu mm = new MainMenu();
                    Parent_JFrame.getMainFrame().getContentPane().removeAll();
                    Parent_JFrame.getMainFrame().add(mm.getMainPanel());
                    Parent_JFrame.getMainFrame().getContentPane().revalidate();
                }
                break;
                case "Logout": {
                    Parent_JFrame.getMainFrame().dispose();
                    Runner r = new Runner();
                    JFrame frame = r.getFrame();
                    Login login = new Login();
                    JPanel panel = login.getMainPanel();
                    frame.add(panel);
                    frame.setVisible(true);
                }
                break;
                case "Book": {
                    if (!Booking.getUnbookedCars().isEmpty()) {
                        Parent_JFrame.getMainFrame().setEnabled(false);
                        Booking_BookCar ac = new Booking_BookCar();
                        ac.setVisible(true);
                    } else {
                        JOptionPane.showMessageDialog(null, "No UnBooked Cars are available !");
                    }
                }
                break;
                case "Unbook": {
                    if (!Booking.getBookedCars().isEmpty()) {
                        Parent_JFrame.getMainFrame().setEnabled(false);
                        Booking_UnBookCar ac = new Booking_UnBookCar();
                        ac.setVisible(true);
                    } else {
                        JOptionPane.showMessageDialog(null, "No Booked Cars found !");
                    }
                }
                break;
            }
        }
    }
}

package BackendCode;

import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;

/**
 *
 * @author @AbdullahShahid01
 */
public class Customer extends Person implements Serializable {

    private int Bill; // increases after every HOUR when a customers has Booked car(s)

    public Customer() {
        super();
    }

    public Customer(int Bill, int ID, String CNIC, String Name, String Contact_No) {
        super(ID, CNIC, Name, Contact_No);
        this.Bill = Bill;
    }

    public int getBill() {
        return Bill;
    }

    public void setBill(int Bill) {
        this.Bill = Bill;
    }

    @Override
    public String toString() {
        return super.toString() + "Customer{" + "Bill=" + Bill + '}' + "\n";
    }

    @Override
    public void Add() {
        ArrayList<Customer> customers = Customer.View();
        if (customers.isEmpty()) {
            this.ID = 1;
        } else {
            this.ID = customers.get((customers.size() - 1)).ID + 1; // Auto ID...
        }
        customers.add(this);
        File file = new File("Customer.ser");
        if (!file.exists()) {
            try {
                file.createNewFile();
            } catch (IOException ex) {
                System.out.println(ex);
            }
        }
        ObjectOutputStream outputStream = null;
        try {
            outputStream = new ObjectOutputStream(new FileOutputStream(file));
            for (int i = 0; i < customers.size(); i++) {
                outputStream.writeObject(customers.get(i));
            }
        } catch (FileNotFoundException ex) {
            System.out.println(ex);
        } catch (IOException ex) {
            System.out.println(ex);
        } finally {
            if (outputStream != null) {
                try {
                    outputStream.close();
                } catch (IOException ex) {
                    System.out.println(ex);
                }
            }
        }
    }

    @Override
    public void Update() {
        ArrayList<Customer> customers = Customer.View();

        // for loop for replacing the new Customer object with old one with same ID
        for (int i = 0; i < customers.size(); i++) {
            if (customers.get(i).ID == ID) {
                customers.set(i, this);
            }
        }

        // code for writing new Customer record 
        ObjectOutputStream outputStream = null;
        try {
            outputStream = new ObjectOutputStream(new FileOutputStream("Customer.ser"));
            for (int i = 0; i < customers.size(); i++) {
                outputStream.writeObject(customers.get(i));
            }
        } catch (FileNotFoundException ex) {
            System.out.println(ex);
        } catch (IOException ex) {
            System.out.println(ex);
        } finally {
            if (outputStream != null) {
                try {
                    outputStream.close();
                } catch (IOException ex) {
                    System.out.println(ex);
                }
            }
        }
    }

    ////////////////////////
    @Override
    public void Remove() {

        ArrayList<Customer> customers = Customer.View();

        // for loop for deleting the required Customer
        for (int i = 0; i < customers.size(); i++) {
            if (customers.get(i).ID == ID) {
                customers.remove(i);
            }
        }

        // code for writing new Customer record 
        ObjectOutputStream outputStream = null;
        try {
            outputStream = new ObjectOutputStream(new FileOutputStream("Customer.ser"));
            for (int i = 0; i < customers.size(); i++) {
                outputStream.writeObject(customers.get(i));
            }
        } catch (FileNotFoundException ex) {
            System.out.println(ex);
        } catch (IOException ex) {
            System.out.println(ex);
        } finally {
            if (outputStream != null) {
                try {
                    outputStream.close();
                } catch (IOException ex) {
                    System.out.println(ex);
                }
            }
        }
    }

    public static ArrayList<Customer> SearchByName(String name) {
        ArrayList<Customer> customers = Customer.View();
        ArrayList<Customer> s = new ArrayList<>();

        for (int i = 0; i < customers.size(); i++) {
            if (customers.get(i).Name.equalsIgnoreCase(name)) {
                s.add(customers.get(i));
            }
        }
        return s;
    }

    public static Customer SearchByCNIC(String CustomerCNIC) {
        ArrayList<Customer> customers = Customer.View();
        for (int i = 0; i < customers.size(); i++) {
            if (customers.get(i).CNIC.equalsIgnoreCase(CustomerCNIC)) {
                return customers.get(i);
            }
        }
        return null;
    }

    public static Customer SearchByID(int id) {
        ArrayList<Customer> customers = Customer.View();
        for (int i = 0; i < customers.size(); i++) {
            if (customers.get(i).ID == id) {
                return customers.get(i);
            }
        }
        return null;
    }

    public static ArrayList<Customer> View() {
        ArrayList<Customer> CustomerList = new ArrayList<>(0);
        ObjectInputStream inputStream = null;
        try {
// open file for reading
            inputStream = new ObjectInputStream(new FileInputStream("Customer.ser"));
            boolean EOF = false;
// Keep reading file until file ends
            while (!EOF) {
                try {
                    Customer myObj = (Customer) inputStream.readObject();
                    CustomerList.add(myObj);
                } catch (ClassNotFoundException e) {
                    System.out.println(e);
                } catch (EOFException end) {
                    EOF = true;
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println(e);
        } catch (IOException e) {
            System.out.println(e);
        } finally {
            try {
                if (inputStream != null) {
                    inputStream.close();
                }
            } catch (IOException e) {
                System.out.println(e);
            }
        }
        return CustomerList;
    }

}

package BackendCode;

import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;

/**
 *
 * @author @AbdullahShahid01
 */
public class Booking implements Serializable {

    private int ID;
    private Customer customer;
    private Car car;
    private long RentTime, ReturnTime; // stores System time when the Book() method is called

    public Booking() {
    }

    public Booking(int ID, Customer customer, Car car, long RentTime, long ReturnTime) {
        this.ID = ID;
        this.customer = customer;
        this.car = car;
        this.RentTime = RentTime;
        this.ReturnTime = ReturnTime;
    }

    public int getID() {
        return ID;
    }

    public void setID(int ID) {
        this.ID = ID;
    }

    public Customer getCustomer() {
        return customer;
    }

    public void setCustomer(Customer customer) {
        this.customer = customer;
    }

    public Car getCar() {
        return car;
    }

    public void setCar(Car car) {
        this.car = car;
    }

    public long getRentTime() {
        return RentTime;
    }

    public void setRentTime(long RentTime) {
        this.RentTime = RentTime;
    }

    public long getReturnTime() {
        return ReturnTime;
    }

    public void setReturnTime(long ReturnTime) {
        this.ReturnTime = ReturnTime;
    }

    @Override
    public String toString() {
        return "Booking{" + "ID=" + ID + ", \ncustomer=" + customer.toString() + ", \ncar=" + car.toString() + ", \nRentTime=" + RentTime + ", ReturnTime=" + ReturnTime + '}' + "\n";
    }

    public void Add() {
        ArrayList<Booking> booking = Booking.View();
        if (booking.isEmpty()) {
            this.ID = 1;
        } else {
            this.ID = booking.get(booking.size() - 1).ID + 1; // Auto ID ...
        }
        this.ReturnTime = 0;
        booking.add(this);
        File file = new File("Booking.ser");
        if (!file.exists()) {
            try {
                file.createNewFile();
            } catch (IOException ex) {
                System.out.println(ex);
            }
        }
        ObjectOutputStream outputStream = null;
        try {
            outputStream = new ObjectOutputStream(new FileOutputStream(file));
            for (int i = 0; i < booking.size(); i++) {
                outputStream.writeObject(booking.get(i));
            }
        } catch (FileNotFoundException ex) {
            System.out.println(ex);
        } catch (IOException ex) {
            System.out.println(ex);
        } finally {
            if (outputStream != null) {
                try {
                    outputStream.close();
                } catch (IOException ex) {
                    System.out.println(ex);
                }
            }
        }
    }

    public void Update() {
        ArrayList<Booking> booking = Booking.View();

        // for loop for replacing the new Booking object with old one with same ID
        for (int i = 0; i < booking.size(); i++) {
            if (booking.get(i).ID == ID) {
                booking.set(i, this);
            }
        }

        // code for writing new Booking record 
        ObjectOutputStream outputStream = null;
        try {
            outputStream = new ObjectOutputStream(new FileOutputStream("Booking.ser"));
            for (int i = 0; i < booking.size(); i++) {
                outputStream.writeObject(booking.get(i));
            }
        } catch (FileNotFoundException ex) {
            System.out.println(ex);
        } catch (IOException ex) {
            System.out.println(ex);
        } finally {
            if (outputStream != null) {
                try {
                    outputStream.close();
                } catch (IOException ex) {
                    System.out.println(ex);
                }
            }
        }
    }

    public void Remove() {

        ArrayList<Booking> booking = Booking.View();
        // for loop for deleting the required Booking
        for (int i = 0; i < booking.size() - 1; i++) {
            if ((booking.get(i).ID == ID)) {

                for (int j = i; j < booking.size() - 1; j++) {
                    booking.set(j, (booking.get(j + 1)));
                }

            }
        }
        // code for writing new Booking record 
        ObjectOutputStream outputStream = null;
        try {
            outputStream = new ObjectOutputStream(new FileOutputStream("Booking.ser"));
            for (int i = 0; i < booking.size() - 1; i++) {
                outputStream.writeObject(booking.get(i));
            }
        } catch (FileNotFoundException ex) {
            System.out.println(ex);
        } catch (IOException ex) {
            System.out.println(ex);
        } finally {
            if (outputStream != null) {
                try {
                    outputStream.close();
                } catch (IOException ex) {
                    System.out.println(ex);
                }
            }
        }
    }

    public int calculateBill() {
        // rent calculation
        long rentTime = this.getRentTime();
        long returnTime = this.getReturnTime();
        long totalTime = returnTime - rentTime;
        totalTime = totalTime / (1000 * 60 * 60);

        int rentPerHour = this.getCar().getRentPerHour();
        if (totalTime != 0) {
            return (int) (rentPerHour * totalTime);
        } else {
            return rentPerHour;
        }
    }

    public static ArrayList<Booking> SearchByCustomerID(int CustomerID) {
        ArrayList<Booking> bookingList = new ArrayList<>(0);
        ObjectInputStream inputStream = null;
        try {
// open file for reading
            inputStream = new ObjectInputStream(new FileInputStream("Booking.ser"));
            boolean EOF = false;
// Keep reading file until file ends
            while (!EOF) {
                try {
                    Booking myObj = (Booking) inputStream.readObject();
                    if (myObj.customer.getID() == CustomerID) {
                        bookingList.add(myObj);
                    }
                } catch (ClassNotFoundException e) {
                    System.out.println(e);
                } catch (EOFException end) {
                    EOF = true;
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println(e);
        } catch (IOException e) {
            System.out.println(e);
        } finally {
            try {
                if (inputStream != null) {
                    inputStream.close();
                }
            } catch (IOException e) {
                System.out.println(e);
            }
        }
        return bookingList;
    }

    public static ArrayList<Booking> SearchByCarRegNo(String CarRegNo) {
        ArrayList<Booking> bookingList = new ArrayList<>(0);
        ObjectInputStream inputStream = null;
        try {
// open file for reading
            inputStream = new ObjectInputStream(new FileInputStream("Booking.ser"));
            boolean EOF = false;
// Keep reading file until file ends
            while (!EOF) {
                try {
                    Booking myObj = (Booking) inputStream.readObject();
                    if (myObj.car.getRegNo().equalsIgnoreCase(CarRegNo)) {
                        bookingList.add(myObj);
                    }
                } catch (ClassNotFoundException e) {
                    System.out.println(e);
                } catch (EOFException end) {
                    EOF = true;
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println(e);
        } catch (IOException e) {
            System.out.println(e);
        } finally {
            try {
                if (inputStream != null) {
                    inputStream.close();
                }
            } catch (IOException e) {
                System.out.println(e);
            }
        }
        return bookingList;
    }

    public static ArrayList<Booking> SearchByCarID(int carID) {
        ArrayList<Booking> bookingList = new ArrayList<>(0);
        ObjectInputStream inputStream = null;
        try {
// open file for reading
            inputStream = new ObjectInputStream(new FileInputStream("Booking.ser"));
            boolean EOF = false;
// Keep reading file until file ends
            while (!EOF) {
                try {
                    Booking myObj = (Booking) inputStream.readObject();
                    if (myObj.car.getID() == carID) {
                        bookingList.add(myObj);
                    }
                } catch (ClassNotFoundException e) {
                    System.out.println(e);
                } catch (EOFException end) {
                    EOF = true;
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println(e);
        } catch (IOException e) {
            System.out.println(e);
        } finally {
            try {
                if (inputStream != null) {
                    inputStream.close();
                }
            } catch (IOException e) {
                System.out.println(e);
            }
        }
        return bookingList;
    }

    public static ArrayList<Booking> View() {
        ArrayList<Booking> bookingList = new ArrayList<>(0);
        ObjectInputStream inputStream = null;
        try {
// open file for reading
            inputStream = new ObjectInputStream(new FileInputStream("Booking.ser"));
            boolean EOF = false;
// Keep reading file until file ends
            while (!EOF) {
                try {
                    Booking myObj = (Booking) inputStream.readObject();
                    bookingList.add(myObj);
                } catch (ClassNotFoundException e) {
                    System.out.println(e);
                } catch (EOFException end) {
                    EOF = true;
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println(e);
        } catch (IOException e) {
            System.out.println(e);
        } finally {
            try {
                if (inputStream != null) {
                    inputStream.close();
                }
            } catch (IOException e) {
                System.out.println(e);
            }
        }
        return bookingList;
    }

    public static ArrayList<Car> getBookedCars() {
        ArrayList<Car> bookedCars = new ArrayList<>();
        ArrayList<Booking> bookings = Booking.View();
        for (int i = 0; i < bookings.size(); i++) {
            if (bookings.get(i).ReturnTime == 0) {
                bookedCars.add(bookings.get(i).car);
            }
        }
        return bookedCars;
    }

    public static ArrayList<Car> getUnbookedCars() {
        ArrayList<Car> allCars = Car.View();
        ArrayList<Car> bookedCars = Booking.getBookedCars();
        for (int i = 0; i < bookedCars.size(); i++) {
            allCars.remove(bookedCars.get(i));
        }
        return allCars;
    }
}

package BackendCode;

import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;

public class CarOwner extends Person implements Serializable {

    private int Balance; // increases after every HOUR when Owner's car(s) is booked

    public CarOwner() {
        super();
    }

    public CarOwner(int Balance, int ID, String CNIC, String Name, String Contact_No) {
        super(ID, CNIC, Name, Contact_No);
        this.Balance = Balance;
    }

    public int getBalance() {
        return Balance;
    }

    public void setBalance(int Balance) {
        this.Balance = Balance;
    }

    @Override
    public String toString() {
        return super.toString() + " CarOwner{" + "Balance=" + Balance + '}' + "\n";
    }

    @Override
    public void Add() {
        ArrayList<CarOwner> carOwner = CarOwner.View();
        if (carOwner.isEmpty()) {
            this.ID = 1;
        } else {
            this.ID = carOwner.get(carOwner.size() - 1).ID + 1; // Auto ID ...
        }
        carOwner.add(this);
        File file = new File("CarOwner.ser");
        if (!file.exists()) {
            try {
                file.createNewFile();
            } catch (IOException ex) {
                System.out.println(ex);
            }
        }
        ObjectOutputStream outputStream = null;
        try {
            outputStream = new ObjectOutputStream(new FileOutputStream(file));
            for (int i = 0; i < carOwner.size(); i++) {
                outputStream.writeObject(carOwner.get(i));
            }
        } catch (FileNotFoundException ex) {
            System.out.println(ex);
        } catch (IOException ex) {
            System.out.println(ex);
        } finally {
            if (outputStream != null) {
                try {
                    outputStream.close();
                } catch (IOException ex) {
                    System.out.println(ex);
                }
            }
        }
    }

    @Override
    public void Update() {
        ArrayList<CarOwner> carOwner = CarOwner.View();

        // for loop for replacing the new CarOwner object with old one with same ID
        for (int i = 0; i < carOwner.size(); i++) {
            if (carOwner.get(i).ID == ID) {
                carOwner.set(i, this);
            }
        }

        // code for writing new CarOwner record 
        ObjectOutputStream outputStream = null;
        try {
            outputStream = new ObjectOutputStream(new FileOutputStream("CarOwner.ser"));
            for (int i = 0; i < carOwner.size(); i++) {
                outputStream.writeObject(carOwner.get(i));
            }
        } catch (FileNotFoundException ex) {
            System.out.println(ex);
        } catch (IOException ex) {
            System.out.println(ex);
        } finally {
            if (outputStream != null) {
                try {
                    outputStream.close();
                } catch (IOException ex) {
                    System.out.println(ex);
                }
            }
        }
    }

    @Override
    public void Remove() {

        ArrayList<CarOwner> carOwner = CarOwner.View();
        // for loop for deleting the required CarOwner
        for (int i = 0; i < carOwner.size(); i++) {
            if ((carOwner.get(i).ID == ID)) {
                carOwner.remove(i);
            }
        }
        // code for writing new CarOwner record 
        ObjectOutputStream outputStream = null;
        try {
            outputStream = new ObjectOutputStream(new FileOutputStream("CarOwner.ser"));
            for (int i = 0; i < carOwner.size(); i++) {
                outputStream.writeObject(carOwner.get(i));
            }
        } catch (FileNotFoundException ex) {
            System.out.println(ex);
        } catch (IOException ex) {
            System.out.println(ex);
        } finally {
            if (outputStream != null) {
                try {
                    outputStream.close();
                } catch (IOException ex) {
                    System.out.println(ex);
                }
            }
        }
    }

    public static ArrayList<CarOwner> SearchByName(String name) {
        ArrayList<CarOwner> carOwner = CarOwner.View();
        ArrayList<CarOwner> s = new ArrayList<>();

        for (int i = 0; i < carOwner.size(); i++) {
            if (carOwner.get(i).Name.equalsIgnoreCase(name)) {
                s.add(carOwner.get(i));
            }
        }
        return s;
    }

    public static CarOwner SearchByCNIC(String carOwnerCNIC) {
        ArrayList<CarOwner> carOwner = CarOwner.View();
        for (int i = 0; i < carOwner.size(); i++) {
            if (carOwner.get(i).CNIC.equalsIgnoreCase(carOwnerCNIC)) {
                return carOwner.get(i);
            }
        }
        return null;
    }

    public static CarOwner SearchByID(int id) {
        ArrayList<CarOwner> carOwner = CarOwner.View();
        for (int i = 0; i < carOwner.size(); i++) {
            if (carOwner.get(i).ID == id) {
                return carOwner.get(i);
            }
        }
        return null;
    }

    public ArrayList<Car> getAllCars() {
        ArrayList<Car> cars = Car.View();
        ArrayList<Car> car1 = new ArrayList<>();
        for (int i = 0; i < cars.size(); i++) {
            if (cars.get(i).getCarOwner().ID == ID) {
                car1.add(cars.get(i));
            }
        }
        return car1;
    }

    public static ArrayList<CarOwner> View() {
        ArrayList<CarOwner> carOwnerList = new ArrayList<>(0);
        ObjectInputStream inputStream = null;
        try {
// open file for reading
            inputStream = new ObjectInputStream(new FileInputStream("CarOwner.ser"));
            boolean EOF = false;
// Keep reading file until file ends
            while (!EOF) {
                try {
                    CarOwner myObj = (CarOwner) inputStream.readObject();
                    carOwnerList.add(myObj);
                } catch (ClassNotFoundException e) {
                    System.out.println(e);
                } catch (EOFException end) {
                    EOF = true;
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println(e);
        } catch (IOException e) {
            System.out.println(e);
        } finally {
            try {
                if (inputStream != null) {
                    inputStream.close();
                }
            } catch (IOException e) {
                System.out.println(e);
            }
        }
        return carOwnerList;
    }

}

package BackendCode;

import java.io.Serializable;

/**
 *
 * @author @AbdullahShahid01
 */
public abstract class Person implements Serializable {

    protected int ID;
    protected String CNIC, Name, Contact_No;

    public Person() {
    }
    public Person(int ID, String CNIC, String Name, String Contact_No) {
        this.ID = ID;
        this.CNIC = CNIC;
        this.Name = Name;
        this.Contact_No = Contact_No;
    }
    public int getID() {
        return ID;
    }
    public void setID(int ID) {
        this.ID = ID;
    }
    public String getCNIC() {
        return CNIC;
    }
    public void setCNIC(String CNIC) {
        this.CNIC = CNIC;
    }
    public String getName() {
        return Name;
    }
    public void setName(String Name) {
        this.Name = Name;
    }
    public String getContact_No() {
        return Contact_No;
    }
    public void setContact_No(String Contact_No) {
        this.Contact_No = Contact_No;
    }
    public abstract void Add();
    public abstract void Update();
    public abstract void Remove();
    @Override
    public String toString() {
        return "Person_new{" + "ID=" + ID + ", CNIC=" + CNIC + ", Name=" + Name + ", Contact_No=" + Contact_No + '}';
    }
    /**
     * A valid CNIC consists of 13 characters, only digits.
     * @param cnic, The CNIC whose validity is to be checked
     * @return true if the passed CNIC is valid 
     */
    public static boolean isCNICValid(String cnic) {
        boolean flag = true;
        if (cnic.length() == 13) {
            for (int i = 0; i < cnic.length(); i++) {
                if (!Character.isDigit(cnic.charAt(i))) {
                    flag = false;
                    break;
                }
            }
        } else {
            flag = false;
        }
        return flag;
    }
    /**
     * A valid Contact No. has 11 digits and starts with "03"
     * @param contact 
     * @return true if the contact is valid 
     */
    public static boolean isContactNoValid(String contact) {
        boolean flag = true;
        if (contact.length() == 11) {
            if (contact.substring(0, 2).equals("03")) {
                for (int i = 0; i < contact.length(); i++) {
                    if (!Character.isDigit(contact.charAt(i))) {
                        flag = false;
                        break;
                    }
                }
            } else {
                flag = false;
            }
        } else {
            flag = false;
        }
        return flag;
    }
    /**
     * A valid name can contain only letters and white spaces
     * @param Name
     * @return true if the name is valid
     */
    public static boolean isNameValid(String Name) {
        boolean flag = false;
        for (int i = 0; i < Name.length(); i++) {
//            Name can contain white spaces
            if (Character.isLetter(Name.charAt(i)) | Name.charAt(i) == ' ') {
                flag = true;
            } else {
                flag = false;
                break;
            }
        }
        return flag;
    }
    /**
     * A valid ID can only be digit greater than 0
     * @param ID
     * @return true if the ID is valid
     */
    public static boolean isIDvalid(String ID) {
        boolean flag = true;
        for (int i = 0; i < ID.length(); i++) {
            if (!Character.isDigit(ID.charAt(i))) {
                flag = false;
                break;
            }
        }
        if (flag) {
            if (Integer.parseInt(ID) <= 0) {
                flag = false;
            }
        }
        return flag;
    }
}
package BackendCode;

import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;

/**
 *
 * @author @AbdullahShahid01
 */
public class Car implements Serializable {

    private int ID;
    private String Maker, Name, Colour, Type;
    int SeatingCapacity;
    String Model, Condition, RegNo;
    private int RentPerHour;
    private CarOwner carOwner;

    public Car() {
    }

    public Car(int ID, String Maker, String Name, String Colour, String Type, int SeatingCapacity, String Model, String Condition, String RegNo, int RentPerHour, CarOwner carOwner) {
        this.ID = ID;
        this.Maker = Maker;
        this.Name = Name;
        this.Colour = Colour;
        this.Type = Type;
        this.SeatingCapacity = SeatingCapacity;
        this.Model = Model;
        this.Condition = Condition;
        this.RegNo = RegNo;
        this.RentPerHour = RentPerHour;
        this.carOwner = carOwner;
    }

    public int getID() {
        return ID;
    }

    public void setID(int ID) {
        this.ID = ID;
    }

    public String getMaker() {
        return Maker;
    }

    public void setMaker(String Maker) {
        this.Maker = Maker;
    }

    public String getName() {
        return Name;
    }

    public void setName(String Name) {
        this.Name = Name;
    }

    public String getColour() {
        return Colour;
    }

    public void setColour(String Colour) {
        this.Colour = Colour;
    }

    public String getType() {
        return Type;
    }

    public void setType(String Type) {
        this.Type = Type;
    }

    public int getSeatingCapacity() {
        return SeatingCapacity;
    }

    public void setSeatingCapacity(int SeatingCapacity) {
        this.SeatingCapacity = SeatingCapacity;
    }

    public String getModel() {
        return Model;
    }

    public void setModel(String Model) {
        this.Model = Model;
    }

    public String getCondition() {
        return Condition;
    }

    public void setCondition(String Condition) {
        this.Condition = Condition;
    }

    public String getRegNo() {
        return RegNo;
    }

    public void setRegNo(String RegNo) {
        this.RegNo = RegNo;
    }

    public int getRentPerHour() {
        return RentPerHour;
    }

    public void setRentPerHour(int RentPerHour) {
        this.RentPerHour = RentPerHour;
    }

    public CarOwner getCarOwner() {
        return carOwner;
    }

    public void setCarOwner(CarOwner carOwner) {
        this.carOwner = carOwner;
    }

    @Override
    public String toString() {
        return "Car_new{" + "ID=" + ID + ", Maker=" + Maker + ", Name=" + Name + ", Colour=" + Colour + ", \nType=" + Type + ", SeatingCapacity=" + SeatingCapacity + ", Model=" + Model + ", Condition=" + Condition + ", RegNo=" + RegNo + ", RentPerHour=" + RentPerHour + ", \ncarOwner=" + carOwner.toString() + '}' + "\n";
    }

    public void Add() {
        ArrayList<Car> car = Car.View();
        if (car.isEmpty()) {
            this.ID = 1;
        } else {
            this.ID = car.get(car.size() - 1).ID + 1; // Auto ID...
        }
        car.add(this);
        File file = new File("Car.ser");
        if (!file.exists()) {
            try {
                file.createNewFile();
            } catch (IOException ex) {
                System.out.println(ex);
            }
        }
        ObjectOutputStream outputStream = null;
        try {
            outputStream = new ObjectOutputStream(new FileOutputStream(file));
            for (int i = 0; i < car.size(); i++) {
                outputStream.writeObject(car.get(i));
            }
        } catch (FileNotFoundException ex) {
            System.out.println(ex);
        } catch (IOException ex) {
            System.out.println(ex);
        } finally {
            if (outputStream != null) {
                try {
                    outputStream.close();
                } catch (IOException ex) {
                    System.out.println(ex);
                }
            }
        }
    }

    /**
     * aik new Object bna k us se Update() ka method call krte hein aur us new
     * object mein jo Car ID hai agar usi ID ki koi car pehle mojood ha tou us
     * se replace ho jay gi
     */
    public void Update() {
        ArrayList<Car> car = Car.View();

        // for loop for replacing the new Car object with old one with same ID
        for (int i = 0; i < car.size(); i++) {
            if (car.get(i).ID == ID) {
                car.set(i, this);
            }
        }

        // code for writing new Car record 
        ObjectOutputStream outputStream = null;
        try {
            outputStream = new ObjectOutputStream(new FileOutputStream("Car.ser"));
            for (int i = 0; i < car.size(); i++) {
                outputStream.writeObject(car.get(i));
            }
        } catch (FileNotFoundException ex) {
            System.out.println(ex);
        } catch (IOException ex) {
            System.out.println(ex);
        } finally {
            if (outputStream != null) {
                try {
                    outputStream.close();
                } catch (IOException ex) {
                    System.out.println(ex);
                }
            }
        }
    }

    public void Remove() {

        ArrayList<Car> car = Car.View();
        // for loop for deleting the required Car
        for (int i = 0; i < car.size(); i++) {
            if ((car.get(i).ID == ID)) {
                car.remove(i);
            }
        }
        // code for writing new Car record 
        ObjectOutputStream outputStream = null;
        try {
            outputStream = new ObjectOutputStream(new FileOutputStream("Car.ser"));
            for (int i = 0; i < car.size(); i++) {
                outputStream.writeObject(car.get(i));
            }
        } catch (FileNotFoundException ex) {
            System.out.println(ex);
        } catch (IOException ex) {
            System.out.println(ex);
        } finally {
            if (outputStream != null) {
                try {
                    outputStream.close();
                } catch (IOException ex) {
                    System.out.println(ex);
                }
            }
        }
    }

    public static ArrayList<Car> SearchByName(String name) {
        ArrayList<Car> car = Car.View();
        ArrayList<Car> s = new ArrayList<>();
        for (int i = 0; i < car.size(); i++) {
            if (car.get(i).Name.equalsIgnoreCase(name)) {
                s.add(car.get(i));
            }
        }
        return s;
    }

    public static Car SearchByID(int id) {
        ArrayList<Car> car = Car.View();
        for (int i = 0; i < car.size(); i++) {
            if (car.get(i).ID == id) {
                return car.get(i);
            }
        }
        return null;
    }

    public static Car SearchByRegNo(String regNo) {
        ArrayList<Car> car = Car.View();
        for (int i = 0; i < car.size(); i++) {
            if (car.get(i).RegNo.equalsIgnoreCase(regNo)) {
                return car.get(i);
            }
        }
        return null;
    }

    public static ArrayList<Car> View() {
        ArrayList<Car> carList = new ArrayList<>(0);
        ObjectInputStream inputStream = null;
        try {
// open file for reading
            inputStream = new ObjectInputStream(new FileInputStream("Car.ser"));
            boolean EOF = false;
// Keep reading file until file ends
            while (!EOF) {
                try {
                    Car myObj = (Car) inputStream.readObject();
                    carList.add(myObj);
                } catch (ClassNotFoundException e) {
                    System.out.println(e);
                } catch (EOFException end) {
                    EOF = true;
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println(e);
        } catch (IOException e) {
            System.out.println(e);
        } finally {
            try {
                if (inputStream != null) {
                    inputStream.close();
                }
            } catch (IOException e) {
                System.out.println(e);
            }
        }
        return carList;
    }

    public static boolean isNameValid(String Name) {
        boolean flag = false;
        for (int i = 0; i < Name.length(); i++) {
//            Name can contain white spaces
            if (Character.isLetter(Name.charAt(i)) |Character.isDigit(Name.charAt(i))| Name.charAt(i) == ' ') {
                flag = true;
            } else {
                flag = false;
                break;
            }
        }
        return flag;
    }

    public static boolean isRegNoValid(String RegNo) {
        // reg no must contain letters followed by digits, both separated by '-' dash
        // EXAMPLE: ASD-2343
        String[] token = RegNo.split("-");
        if (token.length == 2) {
            for (int i = 0; i < token[0].length(); i++) {
                if (!Character.isLetter(token[0].charAt(i))) {
                    return false;
                }
            }
            for (int i = 0; i < token[1].length(); i++) {
                if (!Character.isDigit(token[1].charAt(i))) {
                    return false;
                }
            }
            return true;
        } else {
            return false;
        }
    }

    public boolean isRented() {
        ArrayList<Car> BookedCars = Booking.getBookedCars();
        for (int i = 0; i < BookedCars.size(); i++) {
            if (BookedCars.get(i).ID == this.ID) {
                return true;
            }
        }
        return false;
    }

}
